<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[creativepsyco's Blog]]></title>
  <link href="http://creativepsyco.github.io/atom.xml" rel="self"/>
  <link href="http://creativepsyco.github.io/"/>
  <updated>2013-04-23T18:19:17+08:00</updated>
  <id>http://creativepsyco.github.io/</id>
  <author>
    <name><![CDATA[Mohit Kanwal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Development within a Virtual Machine]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/04/23/android-development-within-a-virtual-machine/"/>
    <updated>2013-04-23T17:30:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/04/23/android-development-within-a-virtual-machine</id>
    <content type="html"><![CDATA[<p>Sometimes it can be <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1027964">really fustrating</a> to work within a Virtual Machine (VM) which might not have support for a number of removable devices. I am talking of VMWare workstation which is a big part of the problem.</p>

<p>Below I describe a working way to install a reliable working environment in VMWare Workstation 9.x running Ubuntu 12.10</p>

<!--more-->


<p>For the instructions below I am installing everything under: <code>~/android</code></p>

<h3>Pre-Requisite</h3>

<ul>
<li>Install Sun (Oracle) JDK for IntelliJ Idea</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:webupd8team/java
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install oracle-java7-installer
</span></code></pre></td></tr></table></div></figure>


<h3>Install Intelli-J</h3>

<ul>
<li>Donwload Intell-J from <a href="http://www.jetbrains.com/idea/download/index.html">this</a> and extract to a directory in your computer</li>
<li>Unpack the directory</li>
<li>Add the Idea bin folder to your PATH</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/lib/&lt;YOUR_IDEA_FOLDER&gt;/bin
</span></code></pre></td></tr></table></div></figure>


<h3>Install Android SDK Bundle</h3>

<ul>
<li>Download the ADT Bundle from <a href="http://developer.android.com/sdk/index.html">this</a></li>
<li>Extract it and move to a location in your</li>
<li>Add these lines to your <code>.bashrc</code> file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:~/android/android-sdk-linux/tools
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:~/android/android-sdk-linux/platform-tools
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:~/android/idea-IC/bin
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Source your <code>.bashrc</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<h3>Test a Device</h3>

<p>Now go ahead and test your shiny new Android Development device by connecting it to the USB port on your machine.</p>

<ul>
<li><p>In VMWare you need to make sure that it connects to the Android Device. You can do this, by navigating to <strong>VM > Removable Devices > Samsung Android Device > Connect (Disconnect fro host)</strong>. This will disconnect it from your host machine (Windows 7 in my case) and connect it to the VMWare instance.</p></li>
<li><p>In VMWare Ubuntu:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb devices <span class="c">#lists all the devices attached to the computer</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If the above command displays nothing, do this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb <span class="nb">wait</span>-for-device
</span><span class='line'>adb start-server
</span><span class='line'>adb devices <span class="c"># display connected devices</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make it wait for the device to link up</p>

<h3>Android Device Issues with VMWare</h3>

<p>Some of the issues that I encountered while connecting my Samsung Galaxy S-III to VMWare on a Windows 7 Enterprise workstation are as follows:</p>

<ul>
<li><p>If you have an error message that says that the device cannot be plugged out, then make sure no process is accessing the device. This includes the Kies software from Samsung. Use the Task Manager to kill them</p></li>
<li><p>If you have an error message that says there is a driver error then perhaps you have a USB 3.0 issue. As of now, VMWare does not support Intel-based USB 3.0 controllers. So you need to suck it up for the moment and find a USB 2.0 port on your machine. Otherwise you need to look up another <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1027964">manual</a></p></li>
</ul>


<h3>Conclusion</h3>

<p>Hopefully by the end of this guide, there is a working android development setup on your machine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails on Nginx and thin]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/04/10/deploying-rails-on-nginx-and-thin/"/>
    <updated>2013-04-10T15:17:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/04/10/deploying-rails-on-nginx-and-thin</id>
    <content type="html"><![CDATA[<p>I have been busy lately doing my Final Year Project which comprises of building a web based service for processing analysis jobs on patient data.</p>

<p>I have developed the web service API using <a href="http://rubyonrails.org/">Rails</a> with MySQL being the backend database.</p>

<p>For deployment purposes I had no idea which of the web servers to run as such I naturally googled online and found people talking about <a href="https://github.com/capistrano/capistrano">Capistrano</a>, a great way to have deployment scripts being run on the server.</p>

<p>I needed something simple, I had seen the advantages of using SVN and <a href="http://nginx.com/">Nginx</a> as a means to deploy by SSH-ing to the server. This keeps things simple and lends us as much control as we need. So I explored.</p>

<!--more-->


<p>Here are instructions to setup a fresh copy of Ubuntu Precise Pangolin with the necessary goodies:</p>

<h3>RVM</h3>

<p>I highly recommend RVM to manage rubies and gems</p>

<ul>
<li>Install the pre-reqs</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion pkg-config
</span><span class='line'>curl -L https://get.rvm.io | bash -s stable
</span><span class='line'><span class="nb">exec</span> <span class="nv">$SHELL</span>
</span><span class='line'>rvm install 1.9.3 --default
</span><span class='line'>ruby -v
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Don&#8217;t require rdoc and ri when installing gems:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;gem: --no-ri --no-rdoc&quot;</span> &gt; ~/.gemrc
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>install the latest Rails (3.2.11):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem i bundler rails
</span></code></pre></td></tr></table></div></figure>


<h3>Thin</h3>

<p>Thin is a ruby server much like the default WebRIck that comes along packaged with the default version of rails.</p>

<ul>
<li>Install thin and make it have some sensible defaults</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install thin
</span><span class='line'>thin install
</span><span class='line'>/usr/sbin/update-rc.d -f thin defaults <span class="c"># this updates the service to automatically start at login</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Now assuming we have a rails app inisde the folder structure <code>/var/www/myapp.example.com</code> we now start the deployment process:</p></li>
<li><p>Create a configuration</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>thin config -C /etc/thin/myapp.example.com -c /var/www/myapp.example.com --servers 3 -e development <span class="c"># or: -e production for caching, etc</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Nginx</h3>

<p>Nginx is a Web Server and has better performance than Apache.</p>

<ul>
<li>Install Nginx</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nginx
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a vHost. To do this, edit <code>/etc/nginx/sites-available/myapp.example.com</code></li>
</ul>


<p>This is a sample Nginx configuration for <code>myapp</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">myapp</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">3000</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">3001</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">3002</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span>   <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">.example.com</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">access_log</span> <span class="s">/var/www/myapp.example.com/log/access.log</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">error_log</span>  <span class="s">/var/www/myapp.example.com/log/error.log</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">root</span>     <span class="s">/var/www/myapp.example.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">index</span>    <span class="s">index.html</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">proxy_set_header</span>  <span class="s">X-Real-IP</span>  <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">proxy_set_header</span>  <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">proxy_set_header</span>  <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">proxy_redirect</span>  <span class="no">off</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">try_files</span> <span class="s">/system/maintenance.html</span> <span class="nv">$uri</span> <span class="nv">$uri/index.html</span> <span class="nv">$uri.html</span> <span class="s">@ruby</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">location</span> <span class="s">@ruby</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">proxy_pass</span> <span class="s">http://myapp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And make it enabled as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -nfs /etc/nginx/sites-available/myapp.example.com /etc/nginx/sites-enabled/myapp.example.com
</span></code></pre></td></tr></table></div></figure>


<h3>Switch the app Live</h3>

<ul>
<li>Restart the different daemons</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/init.d/thin restart
</span><span class='line'>/etc/init.d/nginx reload
</span><span class='line'>/etc/init.d/nginx restart
</span></code></pre></td></tr></table></div></figure>


<p>Now go visit <code>http://myapp</code> and it should show you the Rails page that you are supposed to see. Easy right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton in Python]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/02/09/singleton-in-python/"/>
    <updated>2013-02-09T19:27:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/02/09/singleton-in-python</id>
    <content type="html"><![CDATA[<p>In my current Final Year Project (FYP) for my undergraduate degree I needed to spawn processes and be able to store their state in the memory so that they can be started/re-started or stopped. I had previously gone about doing the same kind of operation in Java with a Singleton <code>ProcessManager</code> Class so I was pretty sure that such a pattern would exist in Python as well. Turns out, it is a <a href="http://lucumr.pocoo.org/2009/7/24/singletons-and-their-problems-in-python/">bad practice</a> to do so.</p>

<p>Anyways, I could not figure out a better way to do this, so I stuck with Singletons. Moreover it got me the job done.</p>

<!--more-->


<p>Here is how the final product looks like:</p>

<div><script src='https://gist.github.com/4744901.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>Cheers
mohit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Dynamic Forms]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/02/02/django-dynamic-forms/"/>
    <updated>2013-02-02T20:33:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/02/02/django-dynamic-forms</id>
    <content type="html"><![CDATA[<p>Here is an example of how to do a dynamic form in Django. I am loving this framework, it&#8217;s so simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ServiceStartForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>    <span class="n">serviceList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">Service</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">serviceList</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">aService</span> <span class="ow">in</span> <span class="n">serviceList</span><span class="p">:</span>
</span><span class='line'>        <span class="n">b</span><span class="p">[</span><span class="n">aService</span><span class="o">.</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">aService</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Within the form, &quot;</span><span class="p">,</span> <span class="n">serviceList</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serviceChoice</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">ChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">c</span><span class="p">,</span> <span class="n">widget</span><span class="o">=</span><span class="n">forms</span><span class="o">.</span><span class="n">Select</span><span class="p">())</span>
</span><span class='line'>    <span class="n">input_directory</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output_directory</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">ServiceStartForm</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="n">serviceList</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">Service</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">aService</span> <span class="ow">in</span> <span class="n">serviceList</span><span class="p">:</span>
</span><span class='line'>            <span class="n">b</span><span class="p">[</span><span class="n">aService</span><span class="o">.</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">aService</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">fields</span><span class="p">[</span><span class="s">&quot;serviceChoice&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">choices</span> <span class="o">=</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django and Travis]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/01/27/django-and-travis/"/>
    <updated>2013-01-27T03:42:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/01/27/django-and-travis</id>
    <content type="html"><![CDATA[<p>A sample <code>.travis</code> file to allow you to run and test on the <a href="http://travis-ci.org">Travis CI</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">python</span>
</span><span class='line'><span class="l-Scalar-Plain">python</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="c1"># - &quot;2.6&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;2.7&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'><span class="l-Scalar-Plain">env</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="c1"># - DJANGO=1.2.7</span>
</span><span class='line'>  <span class="c1"># - DJANGO=1.3.1</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DJANGO=1.4.3 DJANGO_SETTINGS_MODULE=&quot;mysite.travis_settings&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install -q Django==$DJANGO --use-mirrors</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install pep8 --use-mirrors</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">pip install mysql-python --use-mirrors</span>
</span><span class='line'>  <span class="c1"># - pip install https://github.com/dcramer/pyflakes/tarball/master</span>
</span><span class='line'>  <span class="c1"># - pip install -q -e . --use-mirrors</span>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="c1">#   - &quot;pep8 --exclude=migrations --ignore=E501,E225 src&quot;</span>
</span><span class='line'><span class="c1">#   - pyflakes -x W src</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql -e &#39;create database mysite_db;&#39;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">python manage.py syncdb --noinput</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">python manage.py test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Fun]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/01/24/django-fun/"/>
    <updated>2013-01-24T22:29:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/01/24/django-fun</id>
    <content type="html"><![CDATA[<p>Here&#8217;s how to install python on your web server :)</p>

<h3>Log in using SSH access</h3>

<p>This process may change from different kind of hosts to different machines so find out first.</p>

<h3>Install Python 2.7.2</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/python
</span><span class='line'>cd ~/python
</span><span class='line'>wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tgz
</span><span class='line'>tar zxfv Python-2.7.2.tgz
</span><span class='line'>rm -rf Python-2.7.2.tgz
</span><span class='line'>find ~/python -type d | xargs chmod 0755
</span><span class='line'>cd Python-2.7.2
</span><span class='line'>./configure --prefix=$HOME/python
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>cd ..
</span><span class='line'>rm -rf Python-2.7.2</span></code></pre></td></tr></table></div></figure>


<h3>Modify ~/.bashrc</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim ~/.bashrc # Press i and enter the following:
</span><span class='line'>export PATH=$HOME/python/bin:$PATH # press &lt;escape&gt;:wq&lt;enter&gt;
</span><span class='line'>source ~/.bashrc # Whenever you want to work using Python 2.7 in the
</span><span class='line'>                 # console you will need to enter this</span></code></pre></td></tr></table></div></figure>


<p>Test your Python install</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -V # This should output "Python 2.7.2"</span></code></pre></td></tr></table></div></figure>


<h3>Install setuptools</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz
</span><span class='line'>tar xzvf setuptools-0.6c11.tar.gz
</span><span class='line'>rm setuptools-0.6c11.tar.gz
</span><span class='line'>cd setuptools-0.6c11
</span><span class='line'>python setup.py install
</span><span class='line'>cd ..
</span><span class='line'>rm -rf setuptools-0.6c11</span></code></pre></td></tr></table></div></figure>


<h3>Install pip</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz
</span><span class='line'>tar xzvf pip-1.2.1.tar.gz
</span><span class='line'>rm pip-1.2.1.tar.gz
</span><span class='line'>cd pip-1.2.1
</span><span class='line'>python setup.py install
</span><span class='line'>cd ..
</span><span class='line'>rm -rf pip-1.2.1</span></code></pre></td></tr></table></div></figure>


<h3>Install Django, flup and MySQL Python Module</h3>

<p>Now that pip is installed this is easy part.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install Django
</span><span class='line'>pip install flup
</span><span class='line'>pip install MySQL-python</span></code></pre></td></tr></table></div></figure>


<h3>Create .htaccess</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/public_html/mysite # where mysite is the root folder of your site
</span><span class='line'>vim .htaccess # Press i then enter the following:
</span><span class='line'>AddHandler fcgid-script .fcgi
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>RewriteRule ^(.*)$ mysite.fcgi/$1 [QSA,L] # Press wq</span></code></pre></td></tr></table></div></figure>


<h3>Configure Your Website</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/django-projects
</span><span class='line'>cd ~/django-projects
</span><span class='line'>django-admin.py startproject myproject # I use the same name as mysite
</span><span class='line'>                                       # without any periods
</span><span class='line'>cd ~/public_html/mysite
</span><span class='line'>vim mysite.fcgi # Press i then enter the following:
</span><span class='line'>#!/homeX/your_username/python/bin/python
</span><span class='line'>import sys, os
</span><span class='line'>
</span><span class='line'># Where /home/your_username is the path to your home directory
</span><span class='line'>sys.path.insert(0, "/home/your_username/python")
</span><span class='line'>sys.path.insert(13, "/home/your_username/django-projects/myproject")
</span><span class='line'>
</span><span class='line'>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
</span><span class='line'>from django.core.servers.fastcgi import runfastcgi
</span><span class='line'>runfastcgi(method="threaded", daemonize="false") # Press &lt;escape&gt;wq&lt;enter&gt;
</span><span class='line'>chmod 0755 mysite.fcgi</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Test your configuration</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python mysite.fcgi
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Fix any errors and run the command again. When you have an HTML page
</span><span class='line'># returned your Django install is complete. You should be able to go to your
</span><span class='line'># sites URL and view the Django welcome page.</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>That’s everything</p>

<p>Now you can get to work and create some real Django pages.</p>

<h3>A Few Tips</h3>

<p>Remember to install every python and django package using pip – that way they will be available to your django app.
Keep in mind that every Django command like syncdb, collectstatic  etc. should be run using the correct version of Python. This means using source ~/.bashrc every time you log into your SSH client e.g.
source ~/.bashrc
python manage.py syncdb
python manage.py shell
etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Essential Mozilla Command Line]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/01/11/essential-mozilla-command-line/"/>
    <updated>2013-01-11T00:27:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/01/11/essential-mozilla-command-line</id>
    <content type="html"><![CDATA[<p><em>This is a reference of some of the very important mozilla commands that I use in daily Terminal Life</em></p>

<h3>Requirements</h3>

<p>Set up Hg, Autoconf using Brew. Look up the instructions at the official website.</p>

<h3>Setting up of Source Directory</h3>

<p>Mozilla Code can be checked out from http://hg.mozilla.org. To set up a Thunderbird and Calendar clone on your local machine checkout the source code as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash$ hg clone http://hg.mozilla.org/comm-central</span></code></pre></td></tr></table></div></figure>


<p>This will create a <code>comm-central</code> directory in your local machine
Now <code>comm-central</code> depends on a number of submodules which can be fetched by the following commands</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash<span class="nv">$ </span><span class="nb">cd </span>comm-central
</span><span class='line'>bash<span class="nv">$ </span>python client.py checkout
</span></code></pre></td></tr></table></div></figure>


<p>This will fetch the submodules. It will take a while</p>

<h3>Compiling Code</h3>

<p>In order to build the calendar application create a <code>.mozconfig</code> file within <code>comm-central</code> and insert the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mk_add_options <span class="nv">MOZ_OBJDIR</span><span class="o">=</span>@TOPSRCDIR@/obj-TB
</span><span class='line'>mk_add_options <span class="nv">AUTOCONF</span><span class="o">=</span>/usr/local/Cellar/autoconf213/2.13/bin/autoconf213
</span><span class='line'>ac_add_options --enable-calendar
</span><span class='line'>
</span><span class='line'><span class="c"># Turn off compiler optimization. This will make applications run slower,</span>
</span><span class='line'><span class="c"># will allow you to debug the applications under a debugger, like GDB.</span>
</span><span class='line'>ac_add_options --disable-optimize
</span><span class='line'>ac_add_options --disable-jemalloc
</span><span class='line'>
</span><span class='line'><span class="c"># -s makes builds quieter by default</span>
</span><span class='line'><span class="c"># -j4 allows 4 tasks to run in parallel. Set the number to be the amount of</span>
</span><span class='line'><span class="c"># cores in your machine. 4 is a good number.</span>
</span><span class='line'>
</span><span class='line'>mk_add_options <span class="nv">MOZ_MAKE_FLAGS</span><span class="o">=</span><span class="s2">&quot;-j4 -s --no-print-directory&quot;</span>
</span><span class='line'>mk_add_options <span class="nv">JS_READLINE</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">JS_READLINE</span><span class="o">=</span>1
</span><span class='line'>ac_add_options --disable-tests
</span><span class='line'>ac_add_options --disable-installer
</span></code></pre></td></tr></table></div></figure>


<p>Now fire away the compiler using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash<span class="nv">$ </span>make -f client.mk
</span></code></pre></td></tr></table></div></figure>


<p>This will take quite a lot of time depending upon your machine&#8217;s strength of course.</p>

<h3>Applying a patch</h3>

<p>From time to time, you might need to apply a patch from someone else, or maybe your own patch. This is quite easy, but note that if you plan on applying the patch, making some changes and then want to create a patch that doesn&#8217;t contain the patch you originally applied, it might be quite a bit harder.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$MOZILLA</span>/calendar
</span><span class='line'><span class="c"># --dry-run tests the patching process to ensure that the patch will go</span>
</span><span class='line'><span class="c"># ahead cleanly. Be sure to run --dry-run at least once before running</span>
</span><span class='line'><span class="c"># the actual patching process.</span>
</span><span class='line'>patch -p1 -i ~/my_first_bug.diff --dry-run
</span><span class='line'><span class="c"># Now check if the patch applies cleanly, or you are willing to fix the </span>
</span><span class='line'><span class="c"># places it went wrong. When you are confident, you can call:</span>
</span><span class='line'>patch -p0 -i ~/my_first_bug.diff
</span><span class='line'>
</span><span class='line'><span class="c"># If the file to patch was not found, take a look at the patch headers. For</span>
</span><span class='line'><span class="c"># example, if the header contains &quot;+++ themes/winstripe/calendar-views.css&quot;,</span>
</span><span class='line'><span class="c"># then you need to go into the base directory and call again. If the header</span>
</span><span class='line'><span class="c"># contains &quot;+++ mozilla/calendar/base/Makefile.in&quot;, you can use -p2 instead to</span>
</span><span class='line'><span class="c"># strip the &quot;mozilla/calendar&quot; part.</span>
</span><span class='line'>patch -p2 -i ~/my_first_bug.diff
</span></code></pre></td></tr></table></div></figure>


<h3>Creating a patch</h3>

<p>Simply create a diff and store it somewhere</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash<span class="nv">$ </span>hg diff &gt; ~/my_first_patch.diff
</span></code></pre></td></tr></table></div></figure>


<h3>Reverting a patch</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash<span class="nv">$ </span>hg revert .
</span></code></pre></td></tr></table></div></figure>


<p>For more information refer to <a href="https://developer.mozilla.org/en-US/docs/Developer_Guide/Build_Instructions">Mozilla Documentation on Build</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an API with .NET MVC4]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/01/10/creating-an-api-with-net-mvc4/"/>
    <updated>2013-01-10T22:26:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/01/10/creating-an-api-with-net-mvc4</id>
    <content type="html"><![CDATA[<h2>Gist</h2>

<p><em>Recently while working on a vacation assigment I had to create an API in ASP .NET MVC. This was in order to create a booking system on top of the Google Calendar Event storage. Google provides 50000 calls per day free of chrage for the API so we thought this might work. But it also required some form of authentication to prevent the API facade from being misused.</em></p>

<h2>OpenId</h2>

<p>Well when you can&#8217;t store the authentication result you need to think of some third party based authentication mechanism and OpenId is one those means. Most of the modern email and other service providers such as Dropbox etc provide openid schemes which can be leveraged to get basic userinfo and proceed to do something in web application.</p>

<h2>Nancy</h2>

<p>Nancy is a NuGet package which mimics Sinatra. It allows creation of Http GET, POST, DELETE requests as mere functions with much ease. However it does not supports sessions and hence was found to be very hard to use in some of the places. For most operations, however, Nancy is a fantastic option.</p>

<h2>ASP .NET MVC</h2>

<p>// Todo</p>

<h2>Authentication in MVC .NET</h2>

<p>// Todo</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A home called India]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/12/11/a-home-called-india/"/>
    <updated>2012-12-11T22:36:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/12/11/a-home-called-india</id>
    <content type="html"><![CDATA[<p><em>And now some random philosphical thoughts on what I think of India: my home</em></p>

<p><em>I am an Indian from India. For most of us, the buck stop right there. I grew up just like the rest of the kids in my colony: I thought we as a Nation are huge, the best in the world. Buoyed by my sense of patriotism I even wrote a story about an army related incursion in Kashmir which got published in Champak.I knew I had a passion for writing. Nationalism aside, 10 years out in the world, I don&#8217;t think I am the same sane person I used to be back then.</em></p>

<h3>A lot has changed</h3>

<p>Industries grew. Computers overtook our lives. Terrorists became the No#1 menace of any democratic country/nation in the world. All this affected me mentally as a child. And that&#8217;s because news was delivered to me in real-time by my Dad, who works in The Times of India (a leading English newspaper in India).</p>

<h3>Education was important, but not cheap and hence the expected returns</h3>

<p>Let&#8217;s not digress into the discussion of arguing whether education was cheap or not or whether it must be equated to the same pedestal as the stock market which keeps toying between various shades of VIBGYOR. Let&#8217;s just agree to the claim that Education was considered to be the golden ticket for the end of the road journey for which some people save, some people just hope to get along somehow. But this was not the case with Education. After chasing to be the brightest and the so-called <strong>cream</strong> I realized it too late that Education was merely a hall ticket to appear in examinations like the IIT and PMT, it was here that the real trading of horses was done, albeit in a grade-question-answer sort of fashion.</p>

<p>I don&#8217;t know whether my battery ran out of juice or out of luck or out of hard work to run for these exams. I knew they were tough but I did not expect myself to face such obstacles, especially not after I donned the throne of being the <strong>cream</strong> in some colony, in some school.</p>

<p>A fat pay package comes because of education, and that&#8217;s what everyone should think about. This is what I was told.</p>

<h3>Fundamentally flawed assumption</h3>

<p>If something is observed to be holding in a certain frame of reference does not mean it is true. I learnt this in statistics, unfortunately too late.</p>

<h3>Back to the point, India</h3>

<p>I see two systems here, an educational system and a money obsessed employment system. I don&#8217;t know which one feeds the other. I can think of (Based on my Assumption above) the educational system being the culprit. A fine secondary education on my CV though does not allow me to make such a claim. On a closer detail however, it is revealed that major companies setup training institutes to train young graduates which sort of qualifies as an educational establishment, but I would like to argue otherwise as it is a directed process as compared to the seemingly freedom like approach of the Secondary school education system.</p>

<h3>India is full of opportunities and I can see it</h3>

<p>Talk about the BPO boom in India, its the past. Software is the new Hip trend these days. Degree does not matter, the company, the pay does. And everything else is a big fat circle called zero.</p>

<h3>Literally</h3>

<p>This is not the end, its just the beginning of a new discovery about a country I never found attractive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns in Javascript: Widget Based Design]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/12/11/design-patterns-in-javascript-widget-based-design/"/>
    <updated>2012-12-11T22:26:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/12/11/design-patterns-in-javascript-widget-based-design</id>
    <content type="html"><![CDATA[<p><em>One of the most important things people learn after doing/learning a new language or as-these-days a framework is to be able to apply one of the most sought after industrial practices in the form of design patterns.</em></p>

<p>The current semester I had a course involving hefty use of Design Patterns. The course CS3213-Software Design revolved in using design patterns and applying them to the world of software in extreme detail, which I never in my dreams would have imagined.</p>

<p>This is just great.</p>

<h2>The Course</h2>

<p>/// TODO:</p>

<h2>Design Patterns Learnt</h2>

<p>/// TODO:</p>

<h2>Applications Conceived</h2>

<p>/// TODO:</p>

<h2>Moving on</h2>

<p>/// TODO:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Web Service for Multi-Factor Authentication]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/12/01/a-web-service-for-multi-factor-authentication/"/>
    <updated>2012-12-01T21:56:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/12/01/a-web-service-for-multi-factor-authentication</id>
    <content type="html"><![CDATA[<p><em>One of the projects done by me this semester was making Multi-Factor Authentication available for use by other websites. This required hosting our MFA web service over the internet.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An App called tidicity - Part 1]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/11/02/an-app-called-tidicity/"/>
    <updated>2012-11-02T01:49:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/11/02/an-app-called-tidicity</id>
    <content type="html"><![CDATA[<p>Do you think there is a concept of smart cities?</p>

<p>Well there is. Sort of.</p>

<h2>Engagement Platforms with Web 2.0</h2>

<p>With the internet and all the social media buzz in the air, we have truly beein in the grip of a global phenomena. It does not need to affect us globally but rather can have local implications as well. Civic Engagement platforms are the means to realize that and although there are kickstarters for Civic Projects, why not put the responsibility in the hands of the citizens themselves.</p>

<h2>Enter Tidicity</h2>

<p>Tidicity is supposed to be an app which realizes this very objective. Its supposed to be a platform of aggregation of data from crowdsourcing and then relay this to the right channels. It aims to create a buzz about issues for which the required agencies need to wake up.</p>

<h2>Update</h2>

<p>More about the technical challenges in a separate blog post :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Technologies Galore]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/11/02/new-technologies-galore/"/>
    <updated>2012-11-02T01:12:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/11/02/new-technologies-galore</id>
    <content type="html"><![CDATA[<p><em>Most of the stuff is still under production, more details later</em></p>

<p>Don&#8217;t know why but these days I am hooked to Javascript. Perhaps that&#8217;s coz I write way too much Javascript these days or maybe the world is really moving to the client side of things. Now I don&#8217;t want to go into the details of the holy war of server side vs client side of things. However, I do find that client side stuff is very exciting not to mention that completely open.</p>

<p>For client side development I am using a host of technologies to work my way around. These are BackboneJS, ExpressJS, NodeJS and Redis.</p>

<h2>Food For Thought</h2>

<p>Now you would be wondering how come so many *JS appended libraries. Man! if I had known myself I would tell but really don&#8217;t know what is up with the JS convention anyways.</p>

<h2>NodeJS</h2>

<p>To me nodejs seems pretty darn powerful when it comes to serving requests. With it&#8217;s event driven framework to go around I am sure it&#8217;s the language of the server in the times to come. Although I would like to step back and think that Javascript is not really a <code>language</code> but more like a <code>scripting language</code> but I guess the perceptions will change over time. To start a simple node js server all you need is to install <a href="http://nodejs.org/">Node</a> first. My favorite for doing this is <a href="http://mxcl.github.com/homebrew/">Homebrew</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install node
</span></code></pre></td></tr></table></div></figure>


<p>Here is a sample <code>server.js</code> file which acts as a Node web server.</p>

<figure class='code'><figcaption><span>server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1:1337/&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run this all you need to do is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>node server.js
</span></code></pre></td></tr></table></div></figure>


<p>And voila goto <code>localhost:1337</code> and be greeted by a HTML page response. Cool isn&#8217;t it?</p>

<h2>ExpressJS</h2>

<p>Now we dive into a framework for creating web applications with Node. Why? Coz Frameworks rock and there is a clear well defined design strategy at work which frankly most of us would take a lot of time to devise. So why don&#8217;t we use the community&#8217;s advice and just do it!</p>

<p><a href="http://expressjs.com/">ExpressJS</a> makes the creation of web apps with Node such a breeze.</p>

<p>First you would need to install express. For this we would make use of the Node Package manager (NPM)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g express
</span></code></pre></td></tr></table></div></figure>


<p>This would put a bunch of stuff in the directory of our node app. ExpressJS comes with a cool generator (aka rails style) and one can make use of it to create the next scaffold.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>express --sessions --css stylus --ejs myapp
</span></code></pre></td></tr></table></div></figure>


<p>So go ahead and start modifying code. Yay! Follow the guide at the <a href="http://expressjs.com/guide.html">ExpressJS Docs</a></p>

<h2>BackboneJS</h2>

<p>Server side Javascript is fine but what about client side javascript. For this we have <a href="http://backbonejs.org/">BackboneJS</a>, a client-side MVP (most people call it MVC or MV*) framework which organizes your code into awesome folders called <code>models</code>, <code>views</code> and <code>templates</code>. Find out more about it at the official website.</p>

<h2>Redis</h2>

<p>And lastly for persistence, I am looking at <a href="http://try.redis-db.com/">Redis</a>. I am still looking at it. So i will update this once I have more information about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Cross Origin Resource Sharing policies Sinatra and BackboneJS]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/22/solving-cross-origin-resource-sharing-policies-sinatra-and-backbonejs/"/>
    <updated>2012-10-22T22:57:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/22/solving-cross-origin-resource-sharing-policies-sinatra-and-backbonejs</id>
    <content type="html"><![CDATA[<p>Admit it. There are so many times you wish that the localhost-ed version of the application that you are developing in BacboneJS just works. But it doesn&#8217;t. And there is only one reason why it doesn&#8217;t work.</p>

<h2>Cross Origin Resource Sharing</h2>

<p>Yeah, the big culprit is CORS. And here is how you circumvent it. This snippet assumes you are using Sinatra for deploying your Rails API.</p>

<h2>The Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span> <span class="s1">&#39;/*&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">response</span><span class="o">[</span><span class="s2">&quot;Access-Control-Allow-Headers&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;origin, x-requested-with, content-type&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet will add a header to the response that will allow cross-origin javascript coming specifically from localhost to be able to call the server and get a response.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node JS Script to run a web server for Backbone etc]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/22/node-js-script-to-run-a-web-server-for-backbone-etc/"/>
    <updated>2012-10-22T00:18:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/22/node-js-script-to-run-a-web-server-for-backbone-etc</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>Sometimes we find ourselves wanting to be able to host a webserver to test out some HTML or javascript functionality. For example when Cross Origin Resource Policy (CORS) does not allow running of scripts from outside the domain of the webserver.</p>

<h2>The Solution</h2>

<p>The solution is a simple piece of node js script living in the directory. Surprisingly it is way way small</p>

<figure class='code'><figcaption><span>Sample NodeJS Script to run server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">connect</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">)</span>
</span><span class='line'><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would start listening for a request on port 8080 and then serve the files from the current directory.</p>

<p>In order to use you must put the code in a file called <em>server.js</em></p>

<p>And Also must install <code>connect</code> module via</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  npm install connect
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;mohit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Control Javascript]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/21/page-control-javascript/"/>
    <updated>2012-10-21T23:59:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/21/page-control-javascript</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>Sometimes having different pages of content causes us to think about loading them in a page like fashion. Thus there needs to be a <em>mediator</em> that can take care of the loading based on a few configuration variables.</p>

<!--more-->


<h2>The Solution</h2>

<p>Below is my attempt at making a page controller in javascript based a few config variables.</p>

<script src="https://gist.github.com/3868297.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing a Wizard Like Flow in Backbone.js and Jquery Mobile]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/21/doing-a-wizard-like-flow-in-backbone-dot-js-and-jquery-mobile/"/>
    <updated>2012-10-21T23:26:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/21/doing-a-wizard-like-flow-in-backbone-dot-js-and-jquery-mobile</id>
    <content type="html"><![CDATA[<p>One of the things that new app developers do especially mobile ones, is that they give a step like flow to their users to enter data in a much more streamlined process by breaking it down into a number of steps and then load each one at a different time.</p>

<!--more-->


<h2>A Solution</h2>

<script src="https://gist.github.com/3927260.js?file=WizardBackbone.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS3235]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/12/cs3235/"/>
    <updated>2012-10-12T11:07:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/12/cs3235</id>
    <content type="html"><![CDATA[<p>Hi -</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/12/hello-world/"/>
    <updated>2012-10-12T08:11:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/12/hello-world</id>
    <content type="html"><![CDATA[<p><em>Every post starts with a Hello World. Every code you write starts with Hello World.</em></p>

<p><em>Then perhaps this should also.</em></p>

<p>I have moved my blog to Github now with the intention of using more and more of Git and ruby for use in my daily life. I can&#8217;t comment how much I am going to miss in this or how much I am going to gain, it is just a start and hopefully a start of something really new and tidy.</p>

<p>I am using Jekyll to power up the blog. It looks awesome and from the amount of configs needed to get it running I must it does not have that much of a turnaround time. Let&#8217;s see how far I go with this.</p>

<p>And what&#8217;s more this
&#8211;mohit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zombie Ninjas Attack: A survivor's retrospective]]></title>
    <link href="http://creativepsyco.github.io/blog/2012/10/12/zombie-ninjas-attack-a-survivors-retrospective/"/>
    <updated>2012-10-12T07:46:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2012/10/12/zombie-ninjas-attack-a-survivors-retrospective</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
