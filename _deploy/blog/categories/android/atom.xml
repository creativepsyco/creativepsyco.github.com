<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | creativepsyco's Blog]]></title>
  <link href="http://creativepsyco.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://creativepsyco.github.io/"/>
  <updated>2013-09-12T08:35:38+08:00</updated>
  <id>http://creativepsyco.github.io/</id>
  <author>
    <name><![CDATA[Mohit Kanwal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding a perfect dev environment]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/07/04/finding-a-perfect-dev-environment/"/>
    <updated>2013-07-04T13:51:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/07/04/finding-a-perfect-dev-environment</id>
    <content type="html"><![CDATA[<p>Setting up a unobstrusive development environment has its advantages. If you are one of those people who probably spend about 14 hours a day sitting in front of a monitor doing what-not, from testing to deployment and development, then read on. Otherwise you can spend some time reading an <a href="http://www.ibm.com/developerworks/rational/library/define-scope-development-environment/">IBM</a> justification of how and why a solid dev environment pays off. This post is about setting up a solid development environment on Ubuntu Linux 12.04 and contains bits and pieces of information of how a lot of things can be automated.</p>

<p>I assume some familiarity with Linux command-line for the below.</p>

<h3>Prepare your home directory</h3>

<p>This would be where all your patches come in handy. Spice it with some names that you can remember in the long-run. Keep a separate directory for SDKs, sources and the common shared libraries that you use.</p>

<p><code>bash
mkdir /home/creativepsyco
cd /home
chown msk creativepsyco
chgrp msk creativepsyco
cd /home/creativepsyco
mkdir android
</code></p>

<h3>Install ZSH and Oh-My-ZSH</h3>

<p><a href="http://www.zsh.org/">ZSH</a> is a fanstastic tool and better than your average joe-bash-shell. It has advanced modules for autocompletion and lots of plugins which, after you use, trust me, are going to be your goto tools for specific tasks.</p>

<p>You can install zsh by using these commands</p>

<p><code>bash
sudo apt-get update &amp;&amp; sudo apt-get install zsh
</code></p>

<p>Also, install <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> which is another cake layer on top of zsh. It includes tons of automatic zsh scripts and plugins to aid you in development.</p>

<p><code>bash
curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></p>

<p>Set ZSH as your default shell</p>

<p><code>bash
chsh -s /bin/zsh
</code></p>

<blockquote><p>A tip: To get more out of your oh-my-zsh installation you need to enable some or a lot of the plugins in your <code>~/.zshrc</code> file which replaces your <code>~/.bashrc</code> file</p></blockquote>

<h3>Install Git</h3>

<p><code>bash
sudo apt-get install git-core
</code></p>

<h3>Make yourself feel at home with solarized</h3>

<p>I absolutely love the <a href="http://ethanschoonover.com/solarized">Solarized dark theme</a>. I use it everywhere: At work, in my MacBook Pro (running from 2010 without a scratch so far [touch wood]). Here&rsquo;s how it looks like:</p>

<p><img src="http://d.pr/i/xmRI.jpg" alt="Solarized Dark Image" /></p>

<p>Isn&rsquo;t it absolutely delicious. Unfortunately some of the ways to install on ubuntu terminal or gnome-terminal have been rather futile. Here&rsquo;s one that works so far:</p>

<ol>
<li>Go to your home directory</li>
<li>Blindly follow the commands below
<code>bash
$ git clone git://github.com/sigurdga/gnome-terminal-colors-solarized.git
$ cd gnome-terminal-colors-solarized
$ ./solarize
</code></li>
<li>And Voila experiment between the two themes</li>
</ol>


<h3>Start installing Android Libraries</h3>

<p>Now that the eyes are set, start installing the necessary SDKs from Android. You can get the SDK from Android&rsquo;s site. Just need to unzip it and place it in the home folder. Eventually your folder configuration should look something like this:
<code>bash
msk@ubuntu:/home/creativepsyco/android$ ls
adt-bundle-linux            ----- ADT bundle
idea-IC                     ----- IDE IntelliJ stack (Or Eclipse)
shared_android_lib          ----- Shared library
project_android             ----- Project Git directory
anotherapp_android          ----- Project Git directory
</code></p>

<blockquote><p>A Tip: If you are using a 64-bit OS then to make your life easy, you should install these compatible libs to help you: <code>sudo apt-get install ia32-libs</code></p></blockquote>

<h3>SQLite</h3>

<p><code>bash
sudo apt-get install sqlite3
</code></p>

<h3>Ending Note</h3>

<p>Now you have everything for Android development and please follow <a href="http://developer.android.com/training/index.html">Google&rsquo;s tutorials</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Shortcuts and Must-have Gists]]></title>
    <link href="http://creativepsyco.github.io/blog/2013/06/24/android-shortcuts-and-must-have-gists/"/>
    <updated>2013-06-24T17:27:00+08:00</updated>
    <id>http://creativepsyco.github.io/blog/2013/06/24/android-shortcuts-and-must-have-gists</id>
    <content type="html"><![CDATA[<h3>Making use of shared preferences for storing information</h3>

<p>```java</p>

<pre><code>public boolean getStoredLoginState() {
    prefs = getSharedPreferences(PREF_NAME, MODE_PRIVATE);
    boolean state = prefs.getBoolean(B_LOGGED_IN_STATE, false);
    return state;
}

public void setLoggedInState(boolean isLoggedIn) {
    prefs = getSharedPreferences(PREF_NAME, MODE_PRIVATE);
    SharedPreferences.Editor editor = prefs.edit();

    editor.putBoolean(B_LOGGED_IN_STATE, isLoggedIn);
    editor.commit();
}
</code></pre>

<p>```</p>

<h3>Making use of the redirection trick</h3>

<p>Let&rsquo;s say you want to make sure the user is logged in before giving him access to a particular activity view. What you can do is to check the status of the login token through a shared preference and send back an intent with the intent that the current view was invoked with via an extra Intent parameter</p>

<p>This is the code for the invoker:</p>

<p>```java
  public void onCreate(Bundle savedInstanceState) {</p>

<pre><code>    super.onCreate(savedInstanceState);
    setContentView(R.layout.detail_view);

    if (getStoredLoginState() == true) {
        Intent intent = this.getIntent();
        Log.i(TAG, "DetailView onCreate recd position of item: " + intent.getIntExtra(ITEM_ID, 10));

        int pos = intent.getIntExtra(ITEM_ID, 10);

        // Set the text
        TextView textView = (TextView) findViewById(R.id.textView1);

        textView.setText(" " + pos);
    } else {
        // not logged in

        Intent intent = this.getIntent();
        Intent newIntent = new Intent(this, LoginActivity.class);
        newIntent.putExtra(REDIRECT_INTENT, intent);
</code></pre>

<p>//            newIntent.setAction(Intent.ACTION_MAIN);</p>

<pre><code>        newIntent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);

        startActivity(newIntent);
    }
}
</code></pre>

<p>```</p>

<p>And this is the login view code. Note that in the invoker&rsquo;s code we use the <code>Intent.FLAG_ACTIVITY_NO_HISTORY</code> to make sure that the call does not stay in the stack since login is something we need to ensure out of navigation:</p>

<p>```java
@Override</p>

<pre><code>public void onCreate(Bundle savedInstanceState) {
    Log.i(TAG, "LoginActivity onCreate() hit");
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    Log.i(TAG, "Login State: " + getStoredLoginState());

    // Check for a redirect
    Intent intent = getIntent();
    redirect_intent = intent.getParcelableExtra(REDIRECT_INTENT);

    if (redirect_intent != null) {
        Log.i(TAG, "LoginActivity : this is a redirect intent " + redirect_intent);
    }
}

public void onBtnSubmitClicked(View view) {
    TextView username = (TextView) findViewById(R.id.editText);
    TextView password = (TextView) findViewById(R.id.editText1);

    if (isValidLogin(username.getText().toString(), password.getText().toString())) {
        isLoggedIn = true;
        Log.i(TAG, "LoginActivity onBtnSubmitClicked() Username Password match");
    } else {
        isLoggedIn = false;
        new AlertDialog.Builder(this)
                .setTitle("Wrong username/password")
                .setMessage("You have entered wrong username/password")
                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        // continue with delete
                    }
                })
                .show();
    }

    setLoggedInState();

    if (isLoggedIn) {
        Log.i(TAG, "LoginActivity onBtnSubmitClicked starting List View Activity");
        if (redirect_intent != null) {
            // this will make the activity pop up back from the Task stack
            redirect_intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(redirect_intent);
        } else {
            Intent intent = new Intent(this, ListActivity.class);
            startActivity(intent);
        }
    }
}
</code></pre>

<p>```</p>

<p>More information available at the <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">Android Documentation</a></p>

<p>Cheers</p>
]]></content>
  </entry>
  
</feed>
