<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[creativepsyco's Blog]]></title>
  <link href="http://blog.mohitkanwal.com/atom.xml" rel="self"/>
  <link href="http://blog.mohitkanwal.com/"/>
  <updated>2016-01-20T12:31:27+08:00</updated>
  <id>http://blog.mohitkanwal.com/</id>
  <author>
    <name><![CDATA[Mohit Kanwal]]></name>
    <email><![CDATA[mohit.kanwal+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Android emulators on CircleCI]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2015/12/23/troubleshooting-android-emulators-on-circleci/"/>
    <updated>2015-12-23T12:12:01+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2015/12/23/troubleshooting-android-emulators-on-circleci</id>
    <content type="html"><![CDATA[<p><a href="https://circleci.com">CircleCI</a> is a very nifty cloud-hosted continuous integration tool. It allows you to write your code with the peace of mind that you have. You can setup testing for every push, every pull request, every git tag and so on. You can upload to <a href="http://hockeyapp.net">HockeyApp</a> or <a href="https://fabric.io">Fabric</a>. Everything gets tested, leaving you to write the best code possible.</p>

<p>For device testing on CircleCI you will need to spin up an emulator, however, you can&rsquo;t really spin up <code>x86</code> images on the CircleCI containers because they cannot provide <a href="https://discuss.circleci.com/t/provide-kvm-in-container/1179">KVM</a>. As such you are left with ARM emulators which are notoriously extremely slow and end up causing flakiness in testing. Here are some tools which I regularly use to troubleshoot Android Emulators on CircleCI.</p>

<!--more-->


<h3>Getting screenshots via ADB</h3>

<p>You definitely should get screenshots just after the emulator is started, to check if it is not unlocked.</p>

<p>Here is a part of my <code>.circleci.yml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Other depedencies etc.</span>
</span><span class='line'>- emulator -avd circleci-android22 -no-audio -no-window:
</span><span class='line'>    background: <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span>parallel: <span class="nb">true</span>
</span><span class='line'>- circle-android <span class="nb">wait</span>-for-boot
</span><span class='line'>- sleep 30
</span><span class='line'><span class="c"># Unlock the screen</span>
</span><span class='line'>- adb shell input keyevent 82
</span><span class='line'><span class="c"># Run espresso tests</span>
</span><span class='line'>- ./gradlew :app:connectedDebugAndroidTest -PdisablePreDex;
</span></code></pre></td></tr></table></div></figure>


<p>And my espresso tests were failing because of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>org.example.SignupTests &gt; testCheckSignupPageDisplayed<span class="o">[</span>circleci-android22<span class="o">(</span>AVD<span class="o">)</span> - 5.1<span class="o">]</span> FAILED
</span><span class='line'>  java.lang.RuntimeException: Waited <span class="k">for </span>the root of the view hierarchy to have window focus and not be requesting
</span><span class='line'>  layout <span class="k">for </span>over 10 seconds. If you specified a non default root matcher,
</span><span class='line'>  it may be picking a root that never takes focus. Otherwise, something is seriously wrong. Selected Root:
</span></code></pre></td></tr></table></div></figure>


<p>Clearly something was wrong.</p>

<p>So I decided to start taking some screenshots before my emulator ran tests</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell screencap -p | sed <span class="s1">&#39;s/\r$//&#39;</span> &gt; screen.png
</span></code></pre></td></tr></table></div></figure>


<p>Upload to <a href="http://askubuntu.com/a/544450">imgur</a> for immediate viewing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Unlock emulator</span>
</span><span class='line'>- adb shell input keyevent 82
</span><span class='line'><span class="c"># First download the bash script</span>
</span><span class='line'>- wget http://imgur.com/tools/imgurbash.sh
</span><span class='line'>- chmod a+x imgurbash.sh
</span><span class='line'>- adb shell screencap -p | sed <span class="s1">&#39;s/\r$//&#39;</span> &gt; bootscreen.png
</span><span class='line'>- ./imgurbash.sh bootscreen.png
</span><span class='line'><span class="c"># Continue running some more tests</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what I obtained when this ran:</p>

<p><img src="http://i.imgur.com/TzPDvyj.png" alt="warning" /></p>

<p><strong>So more often than not the cause of failure was the system process ANR blocking the espresso tests from getting anywhere.</strong></p>

<p>Essentially whenever the Espresso test fail you must check what the UI looked like at that point of time, the view hierarchy dumped by Espresso does not give a clear indication of what happens on the emulator.</p>

<p>Hope this helps someone who struggled with running espresso tests on CircleCI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Styling Material Toolbar in Android]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2015/03/07/styling-material-toolbar-in-android/"/>
    <updated>2015-03-07T21:30:25+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2015/03/07/styling-material-toolbar-in-android</id>
    <content type="html"><![CDATA[<p><a href="http://www.android.com/versions/lollipop-5-0/">Android Lollipop</a> was released back in Google I/O reflecting the new Material Design philosophy. It was followed soon by the AppCompat Library updating to <a href="http://android-developers.blogspot.sg/2014/10/appcompat-v21-material-design-for-pre.html"><code>v21</code></a>. The Library brought in a new Action Bar pattern called <code>Toolbar</code> which behaves more like a custom view with a promise to customize the look and feel of it instead of the quirks of the <a href="http://cyrilmottier.com/2013/05/24/pushing-the-actionbar-to-the-next-level/">ActionBar</a>. The Action Bar was both less customizable and hard to style. With Toolbar some of it goes away as the Toolbar behaves more like a view group and you can initialize it with various different views which previously you could not.</p>

<!--more-->


<p>However, I still found a lot of inconsistent quirks when styling the Toolbar for use in <a href="https://www.pie.co">Pie</a>.</p>

<h3>The Action Button Styles</h3>

<p>This is how you are supposed to style the Toolbar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;android.support.v7.widget.Toolbar</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">”wrap_content”</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">”match_parent”</span>
</span><span class='line'>    <span class="na">android:minHeight=</span><span class="s">”@dimen/triple_height_toolbar”</span>
</span><span class='line'>    <span class="na">app:theme=</span><span class="s">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span>
</span><span class='line'>    <span class="na">app:popupTheme=</span><span class="s">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, you soon begin to realize that not everything works with this style, especially the ripple effect in the navigation button is inconsistent with the rounded ripple effect, it gets cut off at the navigation button boundaries. The problem happens because when Toolbar is used as a stand alone widget instead of the normal way of using it as an Action Bar styles start breaking up. So how do we fix it? The way to go is to basically make the theme that you apply on the <code>Toolbar</code> to inherit from <code>Widget.AppCompat.Toolbar</code> theme like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;ActionBarTheme&quot;</span> <span class="na">parent=</span><span class="s">&quot;Widget.AppCompat.Toolbar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Define custom attributes here --&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, that still does not properly fix it. In order to rectify, we need to provide additional properties, namely: the <code>actionButtonStyle</code> and the <code>selectableItemBackground</code>. So here&rsquo;s the complete fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;ActionBarTheme&quot;</span> <span class="na">parent=</span><span class="s">&quot;Widget.AppCompat.Toolbar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColorPrimary&quot;</span><span class="nt">&gt;</span>@color/white<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;colorControlNormal&quot;</span><span class="nt">&gt;</span>?actionBarIconColor<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;actionButtonStyle&quot;</span><span class="nt">&gt;</span>@style/ActionBar.ActionButton<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;selectableItemBackground&quot;</span><span class="nt">&gt;</span>?android:selectableItemBackground<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;selectableItemBackgroundBorderless&quot;</span><span class="nt">&gt;</span>?android:selectableItemBackground<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;colorControlHighlight&quot;</span><span class="nt">&gt;</span>@color/colorSecondary<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that for the Button Style we are using the ActionBar button style because the Toolbar does not define one, and if you are inheriting the theme from Toolbar then you will need to do this.</p>

<p>Also to customize the ripple colors, you can change the <code>colorControlHighlight</code> property. Also notice that none of the properties are using the <code>android:</code> prefix because these are not defined by the framework instead they are part of the <code>AppCompat</code> library.</p>

<p>This way you can continue to use the Toolbar as an independent view but still inherit some styles from the ActionBar action button styles which comes in really handy.</p>

<h3>Providing Drop Shadow for compatibility</h3>

<p>Lollipop introduced really cool <code>elevation</code> properties which provide crispy, papery feel to the entire app UX. However, there is no compatible method for older devices to simulate the effect. Shadows seems to be the hardest thing to achieve on the Android platform. There are various ways to simulate the effect on pre-21 devices. However the most credible way to do it is to wrap the content layout in a <a href="http://goo.gl/ANIhgr"><code>DrawShadowFrameLayout</code></a>. It is used by the Google Official I/O App, the source for which is available on <a href="https://github.com/google/iosched">Github</a>.</p>

<p>However, this still requires the resulting content layout to be wrapped inside another layout, which might be a bit too much for being against flattening the UI view hierarchy. I am still searching if this can be done without wrapping the content layout in another layout, perhaps by drawing the 9-patch drawable directly after all the views have been drawn, up &amp; over them. Currently, it causes me to write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">View</span> <span class="nf">_createContentView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">_createContentView</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">VersionUtils</span><span class="o">.</span><span class="na">isLollipopAndAbove</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DrawShadowFrameLayout</span> <span class="n">frameLayout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DrawShadowFrameLayout</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frameLayout</span><span class="o">.</span><span class="na">setLayoutParams</span><span class="o">(</span><span class="k">new</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span>
</span><span class='line'>                                                              <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">));</span>
</span><span class='line'>        <span class="n">frameLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span>
</span><span class='line'>                                  <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frameLayout</span><span class="o">.</span><span class="na">setDefaultShadowDrawable</span><span class="o">(</span><span class="n">AppResources</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">header_shadow</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frameLayout</span><span class="o">.</span><span class="na">setShadowVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">frameLayout</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the good thing, it works perfectly fine. But you can&rsquo;t really animate the shadow regions alongwith the Toolbar, for example if you wanted to gently bring down the action bar when the user launches the app. The shadow is drawn on the content layout therefore does not travel with the action bar. For example something like this effect</p>

<p><img src="https://www.dropbox.com/s/gag8nh7uubgw5km/ezgif.com-gif-maker.gif?dl=0&amp;raw=1" alt="Gif" /></p>

<p>There were more quirks I had to put in while making <a href="https://www.pie.co">Pie</a> I can&rsquo;t seem to remember them right now. But I will write future posts on the various amount of small fixes in the coming weeks. Perhaps something about setting the status bar color correctly. It seems really small but finding the right way of doing things tests your Android knowledge to the limits. And in the end when Stack Overflow turns up nothing about the issue you have, you start to look and debug as to why this really happens. And that&rsquo;s when the fun really begins :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Android Studio startup on Mac: A valid JVM was not found on this machine]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/12/26/fixing-android-studio-startup-on-mac-a-valid-jvm-was-not-found-on-this-machine/"/>
    <updated>2014-12-26T02:25:02+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/12/26/fixing-android-studio-startup-on-mac-a-valid-jvm-was-not-found-on-this-machine</id>
    <content type="html"><![CDATA[<h3>Android Studio on Mac OSX Yosemite</h3>

<p>I recently migrated to Mac OSX Yosemite and discovered that when I booted Android Studio I could not start it up since a JVM was not found on the machine. I was running 1.0RC3 version of Android Studio, and did not have this problem before, on Mavericks. I knew I had a JVM installed.</p>

<!--more-->


<p>I did some search and stumbled upon this <a href="http://stackoverflow.com/questions/27369269/android-studio-was-unable-to-find-a-valid-jvm-related-to-mac-os">thread</a> on stackoverflow. From RC3 onwards Android Studio requires a <code>STUDIO_JDK</code> <a href="http://tools.android.com/recent/androidstudio1rc3_releasecandidate3released">environment variable</a> to be able to run correctly. I found the resulting applescript as discussed in the answer a bit of an overkill. Here&rsquo;s what I did:</p>

<p>First find out the correct version of Java installed in your machine. As provided in the comments, you can use this command to find it out</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo $(find /Library/Java/JavaVirtualMachines -depth 1|tail -n1)
</span></code></pre></td></tr></table></div></figure>


<p>It will print something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk</span></code></pre></td></tr></table></div></figure>


<p>depending on your Java version</p>

<p>Open your <code>/etc/launchd.conf</code> on your mac using the terminal and add the lines from the <code>echo</code> command (<code>launchd.conf</code> might not exist on your machine):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setenv STUDIO_JDK /Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk
</span></code></pre></td></tr></table></div></figure>


<p>Now open your <code>~/.bashrc</code> file and add the following lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export STUDIO_JDK=/Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk
</span><span class='line'>grep -E "^setenv" /etc/launchd.conf | xargs -t -L 1 launchctl</span></code></pre></td></tr></table></div></figure>


<p>This will set the correct environment variable during startup. And you can continue to launch Android Studio properly. To see immediate effect, type <code>source ~/.bashrc</code> in your terminal to refresh the environment variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Background that does not resize on Soft Keyboard]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/05/12/set-background-that-does-not-resize-on-soft-keyboard/"/>
    <updated>2014-05-12T14:29:45+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/05/12/set-background-that-does-not-resize-on-soft-keyboard</id>
    <content type="html"><![CDATA[<h3>Problem</h3>

<p>Here is an interesting problem. Let&rsquo;s say you are in a particular view, and you want to be able to set a background. You simple use the <code>View.setBackground(Drawable)</code> or <code>View.setBackgroundDrawable(Drawable)</code> call to do this. However once you do this, you realize that whenever the soft keyboard is opened it pushes your view to the top/resizes it such that your background looks squished.</p>

<!--more-->


<p>I encountered this while working on a chatting application. The resulting image looks something like this:</p>

<p><img src="http://blog.mohitkanwal.com/images/flat_background.jpg" alt="Image" /></p>

<h3>Solution</h3>

<p>The solution is quite simple:</p>

<ul>
<li>In your Activity Manifest, declare the activity which houses the view to <code>android:windowSoftInputMode="adjustResize|stateHidden"</code></li>
<li>Then follow this piece of code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Bitmap</span> <span class="n">bmImg</span><span class="o">;</span>
</span><span class='line'><span class="c1">// Load a bitmap into bmImg</span>
</span><span class='line'><span class="n">BitmapDrawable</span> <span class="n">background</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BitmapDrawable</span><span class="o">(</span><span class="n">bmImg</span><span class="o">);</span>
</span><span class='line'><span class="n">background</span><span class="o">.</span><span class="na">setGravity</span><span class="o">(</span><span class="n">Gravity</span><span class="o">.</span><span class="na">TOP</span><span class="o">);</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">setBackgroundDrawable</span><span class="o">(</span><span class="n">background</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make sure that you set your background with the <code>Gravity.TOP</code> which will ensure it is always aligned with the top of the container view and is not affected by the Soft Keyboard display.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress From 2 Computers]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/03/26/blogging-with-octopress-from-2-computers/"/>
    <updated>2014-03-26T00:47:03+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/03/26/blogging-with-octopress-from-2-computers</id>
    <content type="html"><![CDATA[<p>I use Octopress to blog from multiple computers, work and home computers, sometimes Virtual Machines even. I don&rsquo;t have a track of where my latest post is going to be written from.</p>

<p>However, recently while deploying I encountered this strange error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## Pushing generated _deploy website</span>
</span><span class='line'>To git@github.com:creativepsyco/creativepsyco.github.com.git
</span><span class='line'> ! <span class="o">[</span>rejected<span class="o">]</span>        master -&gt; master <span class="o">(</span>non-fast-forward<span class="o">)</span>
</span><span class='line'> error: failed to push some refs to <span class="s1">&#39;git@github.com:creativepsyco/creativepsyco.github.com.git&#39;</span>
</span><span class='line'> hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'> hint: its remote counterpart. Integrate the remote changes <span class="o">(</span>e.g.
</span><span class='line'> hint: <span class="s1">&#39;git pull ...&#39;</span><span class="o">)</span> before pushing again.
</span><span class='line'> hint: See the <span class="s1">&#39;Note about fast-forwards&#39;</span> in <span class="s1">&#39;git push --help&#39;</span> <span class="k">for </span>details.
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>The reason is that Octopress only does a push to the <code>master</code> branch and not a pull. To resolve this, do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msk@MathBook Pro ~/Projects/creativepsyco.github.com <span class="o">(</span><span class="nb">source</span><span class="o">)</span><span class="nv">$ </span><span class="nb">cd </span>_deploy
</span><span class='line'>msk@MathBook Pro ~/Projects/creativepsyco.github.com/_deploy <span class="o">(</span>master<span class="o">)</span><span class="nv">$ </span>git push origin master -f
</span><span class='line'>Counting objects: 1313, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 2 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>702/702<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>861/861<span class="o">)</span>, 99.72 KiB | 0 bytes/s, <span class="k">done</span>.
</span><span class='line'>Total 861 <span class="o">(</span>delta 423<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:creativepsyco/creativepsyco.github.com.git
</span><span class='line'> + 4647e10...aa94c85 master -&gt; master <span class="o">(</span>forced update<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that all is well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msk@MathBook Pro ~/Projects/creativepsyco.github.com/_deploy <span class="o">(</span>master<span class="o">)</span><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class='line'>msk@MathBook Pro ~/Projects/creativepsyco.github.com <span class="o">(</span><span class="nb">source</span><span class="o">)</span><span class="nv">$ </span>rake gen_deploy
</span><span class='line'><span class="c">## Generating Site with Jekyll</span>
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>unchanged sass/styles.scss
</span><span class='line'>Configuration from /Users/msk/Projects/creativepsyco.github.com/_config.yml
</span><span class='line'>Building site: <span class="nb">source</span> -&gt; public
</span><span class='line'>Configuration from /Users/msk/Projects/creativepsyco.github.com/_config.yml
</span><span class='line'>Configuration from /Users/msk/Projects/creativepsyco.github.com/_config.yml
</span><span class='line'>Configuration from /Users/msk/Projects/creativepsyco.github.com/_config.yml
</span><span class='line'>Configuration from /Users/msk/Projects/creativepsyco.github.com/_config.yml
</span><span class='line'>Successfully generated site: <span class="nb">source</span> -&gt; public
</span><span class='line'><span class="c">## Deploying branch to Github Pages</span>
</span><span class='line'><span class="c">## Pulling any updates from Github Pages</span>
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>There is no tracking information <span class="k">for </span>the current branch.
</span><span class='line'>Please specify which branch you want to merge with.
</span><span class='line'>See git-pull<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details
</span><span class='line'>
</span><span class='line'>    git pull &lt;remote&gt; &lt;branch&gt;
</span><span class='line'>
</span><span class='line'>    If you wish to <span class="nb">set </span>tracking information <span class="k">for </span>this branch you can <span class="k">do </span>so with:
</span><span class='line'>
</span><span class='line'>        git branch --set-upstream-to<span class="o">=</span>origin/&lt;branch&gt; master
</span><span class='line'>
</span><span class='line'>        <span class="nb">cd</span> -
</span><span class='line'>        rm -rf _deploy/about
</span><span class='line'>        rm -rf _deploy/assets
</span><span class='line'>        rm -rf _deploy/atom.xml
</span><span class='line'>        rm -rf _deploy/blog
</span><span class='line'>        rm -rf _deploy/docs
</span><span class='line'>        rm -rf _deploy/favicon.png
</span><span class='line'>        rm -rf _deploy/font
</span><span class='line'>        rm -rf _deploy/images
</span><span class='line'>        rm -rf _deploy/index.html
</span><span class='line'>        rm -rf _deploy/javascripts
</span><span class='line'>        rm -rf _deploy/portfolio
</span><span class='line'>        rm -rf _deploy/robots.txt
</span><span class='line'>        rm -rf _deploy/sitemap.xml
</span><span class='line'>        rm -rf _deploy/stylesheets
</span><span class='line'>        rm -rf _deploy/super-awesome
</span><span class='line'>
</span><span class='line'><span class="c">## Copying public to _deploy</span>
</span><span class='line'>cp -r public/. _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>
</span><span class='line'><span class="c">## Committing: Site updated at 2014-03-25 16:44:37 UTC</span>
</span><span class='line'><span class="o">[</span>master 88fada5<span class="o">]</span> Site updated at 2014-03-25 16:44:37 UTC
</span><span class='line'> 36 files changed, 36 insertions<span class="o">(</span>+<span class="o">)</span>, 36 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">## Pushing generated _deploy website</span>
</span><span class='line'>Counting objects: 166, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 2 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>75/75<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>75/75<span class="o">)</span>, 9.29 KiB | 0 bytes/s, <span class="k">done</span>.
</span><span class='line'>Total 75 <span class="o">(</span>delta 37<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:creativepsyco/creativepsyco.github.com.git
</span><span class='line'>   aa94c85..88fada5  master -&gt; master
</span><span class='line'>
</span><span class='line'><span class="c">## Github Pages deploy complete</span>
</span><span class='line'><span class="nb">cd</span> -
</span></code></pre></td></tr></table></div></figure>


<p>Cheers</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebView vulnerability in Facebook Android SDK: Embedded OAuth]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/02/02/webview-vulnerability-in-facebook-android-sdk-embedded-oauth/"/>
    <updated>2014-02-02T04:24:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/02/02/webview-vulnerability-in-facebook-android-sdk-embedded-oauth</id>
    <content type="html"><![CDATA[<p><em>Reposting this from my <a href="http://www.facebook.com/mohitkanwal">FB feed</a></em></p>

<h2>TL;DR</h2>

<p>Don&rsquo;t put your FB username and password within mobile apps when you don&rsquo;t have the native FB app installed!</p>

<p>Today I learnt that the Facebook SDK for Android is very insecure. At first I thought Man in the Middle attacks on the SDK OAuth authentication process is not possible, but if you are embedding someone else&rsquo;s WebView within your own App via the SDK, you can very well control them, either via Reflection, or just by modifying the SDK code coz FB makes the SDK a public download which you then compile to link in your app. If the SDK does not find the FB app installed on a user&rsquo;s phone, it resorts to using the fallback mechanism of using an embedded WebView for authentication.</p>

<!--more-->


<p>That said, I hacked around to see if injecting Javascript on the WebView was possible and it was, with a bit of change I could actually get the user name and password of the victim by making him/her uninstall Facebook on their phone and use FB login in my app. This is bad, real bad. There is no way of telling if the username/password was stolen by the underlying app due to the FB login since only the developer of the app controls that. And he/she can modify the SDK to suit their evils needs. I wonder if there are any apps that do that already.</p>

<p>The images below show: the embedded web view login (with the cross mark) and the intercepted username and password. The last image shows the native FB login provided by the Facebook Android App.</p>

<p>If you are interested in reproducing this, apply this <a href="https://gist.github.com/creativepsyco/8663913">diff</a> to your FB SDK WebDialog.java and you will be pretty amused.</p>

<p>An Embedded Web View OAuth Sign in procedure</p>

<p><img src="https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-ash3/t1/1557490_10152184000028914_1756836245_n.jpg" alt="Web Login" /></p>

<p>Injecting Javascript results in this:</p>

<p><img src="https://fbcdn-sphotos-a-a.akamaihd.net/hphotos-ak-frc1/t1/1654397_10152183985258914_440664198_n.jpg" alt="WebView Hack" /></p>

<p>Actual Android Login is supposed to look this:</p>

<p><img src="https://fbcdn-sphotos-g-a.akamaihd.net/hphotos-ak-prn1/t1/1654221_10152183994608914_2045844282_n.jpg" alt="Native Login" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rooting Samsung Galaxy S3 GT-I9305 with CyanogenMod Jelly Bean 4.2.2]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/02/02/rooting-samsung-galaxy-s3-gt-i9305-with-cyanogenmod-jelly-bean-4-dot-2-2/"/>
    <updated>2014-02-02T03:36:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/02/02/rooting-samsung-galaxy-s3-gt-i9305-with-cyanogenmod-jelly-bean-4-dot-2-2</id>
    <content type="html"><![CDATA[<p>After getting the 4.3 update my Samsung Galaxy S3 started having <a href="http://au.ibtimes.com/articles/536399/20140129/galaxy-s4-s3-note-2-update.htm#.Uu1M9HeSxqs">weird battery problems</a>, it was a high I moved to a custom ROM since they were a lot stable than a few years back and offered a much better stock Android experience without any bloated software than device OEMs put inside.</p>

<p>In this post, I shall roughly tell you how I installed a custom on my Samsung Phone.</p>

<blockquote><p>Warning: Rooting voids the warranty of your device. We and the developers of these files are not responsible if anything happens to your device. Use this rooting guide at your own risk!</p></blockquote>

<!--more-->


<h2>Prerequisites</h2>

<ul>
<li>Need a Windows XP/Windows 7/Windows 8 PC</li>
<li>Ample of charge on your phone battery</li>
<li>The Galaxy S3 I9305 should be factory unlocked.</li>
<li>Have a model number <em>I9305</em> phone, the international model of Samsung Galaxy 3 LTE.</li>
<li>Do make a backup of the phone date, as everything will be erased.</li>
</ul>


<h2>Downloads</h2>

<ul>
<li><a href="http://download.chainfire.eu/232/CF-Root/CF-Auto-Root/CF-Auto-Root-m3-m3zh-gti9305.zip">ODIN + Auto Root File</a></li>
<li><a href="http://techerrata.com/file/twrp2/i9305/openrecovery-twrp-2.5.0.0-i9305.tar">TWRP File</a>, only version 2.5.* works properly with the CyanogenMod ROM</li>
<li><a href="http://download.cyanogenmod.org/?device=i9305&amp;type=stable">CyanogenMod ROM for 4.2.2</a></li>
<li>Corresponding <a href="http://goo.im/gapps/gapps-jb-20130812-signed.zip">Google Apps package</a></li>
</ul>


<h2>Steps</h2>

<ul>
<li>Plug the S3 into your computer and make sure all drivers are installed correctly. If you run into problems, try a different USB cable or port. Then turn your device off.</li>
<li>Put the S3 into Download Mode by holding in the Power, Home, and Volume Down buttons at the same time. Then push the Volume Up button once this screen pops up.</li>
<li>Unzip and open the CF-Auto-Root folder and right click on Odin.exe, then click on “Run as Administrator”.</li>
<li>Make sure there is a yellow box in the screen, if not then the USB drivers did not install correctly and you should try a different USB cable/port.</li>
<li>Once you have the yellow box, click on PDA and then browse for the file that was downloaded with Odin, (CF-Auto-Root-i9305.tar.md5). Then click Start.</li>
<li>Once you get a &ldquo;green&rdquo; box, means you have succeeded.</li>
</ul>


<p>Next we need to install TWRP:</p>

<ul>
<li>Put you device in Download mode, make sure its connected via USB</li>
<li>Go back to Odin, and click PDA</li>
<li>This time, get the openrecoveryXXX-twrp-2.5.x.tar file and flash it</li>
<li>If you get a &ldquo;green&rdquo; box at the end, means you passed</li>
</ul>


<p>Now we need to transfer the Custom ROM + Google Apps package zip files to the Phone either via <code>adb</code> or via manual file transfer through Windows Explorer</p>

<p>Once that&rsquo;s done we can launch the recovery mode to commence installing the custom ROM.</p>

<ul>
<li>Turn off your phone</li>
<li>Hold in the Power, Volume Up, and Home buttons until “Recovery Booting” appears in the top left corner. Then release the power button but keep holding the Volume Up and the Home button until “TeamWin” appears on the screen.</li>
<li>Click on Wipe – Advanced Wipe and select “Dalvik Cache”, “System”, and “Cache”. Then move the slider to complete the wipe.</li>
<li>Go back and click on Install and scroll down to the location where you transfered the ROM zip file. Click on the zip file and then slide to install the ROM.</li>
<li>After that do the same step to install Google Apps</li>
<li>After move to Home and do a factory reset to delete useless App Data</li>
</ul>


<p>And you are done, Congratulations!</p>

<h2>Known Issues</h2>

<ul>
<li>If your <a href="http://forum.cyanogenmod.com/topic/78601-unfortunately-android-keyboard-aosp-has-stopped-problem/">Google Apps don&rsquo;t work</a>, like the Keyboard crashes or something, make sure that you have the correct Google Apps package</li>
<li>If you get assert failed error, you will need to try with different nightlies until you hit the one that succeeds.</li>
<li>For some of the common problems, visit the <a href="http://wiki.cyanogenmod.org/w/Wiki_Problems">Wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing a proper Github pull request]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/01/24/doing-a-proper-github-pull-request/"/>
    <updated>2014-01-24T16:16:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/01/24/doing-a-proper-github-pull-request</id>
    <content type="html"><![CDATA[<p>While there may be different kind of development strategies floating around the merge vs rebase git model, one thing is for sure, you would at the end of the day want a clean merge from the contributors so that it can be tracked tested and cherry-picked if it needs to. This is where pull-requests are so effective.</p>

<h2>What is a pull-request?</h2>

<p>From the <a href="https://help.github.com/articles/using-pull-requests">Official Github Guide</a>:</p>

<blockquote><p>Pull requests let you tell others about changes you&rsquo;ve pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.</p></blockquote>

<p>Pull requests are useful in the shared repository model where contributors can work on different topic branches and then file a pull request to be able to initiate discussion about potential changes which does not need to affect the rest of the project.</p>

<h2>Example</h2>

<p>Here is an <a href="https://github.com/square/wire/pull/81">example</a> of a pull request I filed for Square&rsquo;s Wire open source project.</p>

<!--more-->


<h2>Creating a pull request</h2>

<p>These steps create a topic branch off the <code>master</code> branch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull origin master
</span><span class='line'>git checkout -b pull-request-demo
</span><span class='line'>git push origin pull-request-demo
</span></code></pre></td></tr></table></div></figure>


<p>After that you can work on the branch and do indvidual commits. At this point if you need to update your local copy of the source you should not in any case do a</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull origin master
</span></code></pre></td></tr></table></div></figure>


<p>This will screw up your commits by merging the two branches and will cause issues when your topic branch will is merged with <code>master</code>. Instead do a <code>rebase</code>. In short this will preserve the order of your commits and keeps the git history linear. To understand why please refer to <a href="https://blogs.atlassian.com/2013/10/git-team-workflows-merge-or-rebase/">this</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase origin master
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Never rebase already pushed branches. Rebase should only be applied to your local working branch about no one needs to know. This way we can always force push our changes to Github so that the pull request is bettter as we will see in the next step.</p></blockquote>

<h2>Filing up a pull request</h2>

<p>You will need to use the browser to visit the repository web page and file one. More details <a href="http://yangsu.github.io/pull-request-tutorial/">here</a></p>

<p><img src="http://github-images.s3.amazonaws.com/help/pull_requests/pull-request-review-page.png" height="400" width="800" alt="Pull Request Page" /></p>

<h2>Modifying Code after discussions</h2>

<p>Once the pull request has been filed you can start discussing with the maintainer of the project about the potential changes that need to be made. For example, style fixes etc.</p>

<p>You can push more commits to the the topic branch and the pull request will get updated. Once the pull request is sort of approved by the maintainer, he/she will probably ask you submit only one single commit for your changes. This is very important as merging any contributed can be tracked.</p>

<p>You would need to squash your commits for this. You can do this by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase -i HEAD~5
</span></code></pre></td></tr></table></div></figure>


<p>This will allow you to pick the commits that you want to keep or squash them altogether. The disadvantage of squashing commits is that you lose your git history. However, if you want you can have a dirty branch to move the commits to in case you want the history to remain.</p>

<p>And force push your changes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push origin pull-request-demo --force
</span></code></pre></td></tr></table></div></figure>


<p>Your changes will appear on the filed pull request page. And if all goes will be merged with the main project branch :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Activity: Problem with Posting Runnables]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/01/05/android-activity-problem-with-posting-runnables/"/>
    <updated>2014-01-05T23:44:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/01/05/android-activity-problem-with-posting-runnables</id>
    <content type="html"><![CDATA[<p>A lot of times in Android you end up writing code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//---- Normal Code above ---</span>
</span><span class='line'><span class="n">Runnable</span> <span class="n">runnable</span>  <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Do something stupid</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// Singleton Handler Manager -- not an instance one, am I smart?</span>
</span><span class='line'><span class="n">HandlerManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="mi">20000</span><span class="o">);</span> <span class="c1">// Run this after 20 seconds! Delay processing of data</span>
</span><span class='line'><span class="n">finish</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is, cooking up a lot of <code>Runnables</code> and posting them on the Handler to be run after a period of time. It happens.</p>

<p>As our role as developers trying to get a feature done in time, sometimes these Runnnables are the only hope. However, this <code>Runnable</code> introduces a potential memory leak.</p>

<!--more-->


<p>Android uses a Garbage Collection mechanism to reclaim allocated memory in which nodes are traversed from the root of the Collector and each node is checked for incoming references, if these references fall into a particular type of reference, <code>Final</code>, <code>Weak</code> or other types of finalized references, these nodes are freed and memory unallocated. However, if there any incoming references, then this node cannot be freed up. If you are developing a large app, you will definitely face this issue at some point or the other.</p>

<p>Now you must be asking why the above code will cause a memory leak.</p>

<p>It does as follows.</p>

<ul>
<li>When you created a Runnable, it ended up being an inner class, and all inner classes have outer class <a href="http://stackoverflow.com/questions/1816458/getting-hold-of-the-outer-class-object-from-the-inner-class-object">references</a>.</li>
<li>Now your Runnable is queued in the Singleton Handler, which is always alive in Memory</li>
<li>As such your Runnable is alive</li>
<li>And so is your Activity</li>
<li>When you call finish(), your activity is queued up to be destroyed, but the Garbage Collector finds that your Activity instance is referenced from your Runnable inner class instance and therefore does not collect its allocated memory.</li>
</ul>


<p>So hopefully, now you get it?</p>

<blockquote><p>The solution is to use static inner classes so as to avoid initialization of the instance with the outer class instance.</p>

<p>static inner classes use the class instance, not the instance reference and therefore are safe from these issues.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Google Protocol Buffers with Wire]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/12/31/optimizing-google-protocol-buffers-with-wire/"/>
    <updated>2013-12-31T02:10:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/12/31/optimizing-google-protocol-buffers-with-wire</id>
    <content type="html"><![CDATA[<p>The concept of <a href="https://code.google.com/p/protobuf/">Protocol Buffers</a> by Google is amazing.</p>

<h3>Why should you use it</h3>

<p>Protocol Buffers is a serialization strategy, much like XML or JSON. A lot of mobile apps and web services make use of JSON for passing information. However, protocol buffers are inherently compressed formats and not intented for the human eye (readability wise). You should definitely take a look at it if you feel that you are using a lot of the mobile data or if the primary target group of your app is the domain of mobile. It however, makes sense to use them for internal RPC related APIs and communication channels.</p>

<!--more-->


<h3>Why should you not use it</h3>

<p>Having worked with protocol buffers extensively during the development of one of my company&rsquo;s Android apps, I can say that Protocol Buffers definitely can have their own problems. In an agile environment where requirements can change extensively during development, it makes no sense to actually use protocol buffers without breaking the schema. And according to Google you might not wanna change the structure of Enums. I will just summarize what <a href="http://blakesmith.me/2012/09/05/a-primer-on-protocol-buffers.html">Blake Smith</a> has to say about the anti-pattern:</p>

<p>Don&rsquo;t use Protocol Buffers <strong>IF</strong>:</p>

<blockquote><ul>
<li>You need <strong>dynamic message</strong> schemas</li>
<li>You’re sending a lot of data directly to the browser</li>
<li>You need wide-spread language support as the ability to generate protocol buffer code files is only for a limited set of languages</li>
<li>You require direct human readability</li>
</ul>
</blockquote>

<h3>Google Protocol Buffers on Android</h3>

<p>On Android there is an option to use the pure <a href="https://code.google.com/p/protobuf/downloads/list">Java version</a> or a lite version (included within the original jar) or a <a href="https://code.google.com/p/protobuf-j2me/">Java ME version</a> which reduces the generated code size. However, there is a big issue with the usage of Protocol Buffer on Android. The Android Dalvik VM only allows 60K public methods to be exposed during runtime due to the limitation of the size of the DEX class file that it cam store in memory, for Android Gingerbread, this is about 7MBs. This limit is strictly enforced on Gingerbread (Android 2.3.3) and if it is the minimum version of Android that you want to support then you are in pretty bad luck. For each attribute on the protocol buffer message file there are about 9 public methods generated and this increases for optional/repeated fields. As such a lot of code is generated which won&rsquo;t be used by large anyways in your app. On the other hand, due to the amount of public methods exposed, you run the risk of not being able to ship your app on Gingerbread.</p>

<h3>With Wire</h3>

<p>I used the Java Me version and the lite version of the protocol buffers but without any significant gains in application public method size. Then came <a href="https://github.com/square/wire">Wire</a> by Square (the company is obsessed with Android.. <a href="http://square.github.io/">check out their open source contributions</a>). Wire allowed me to reduce the number of public methods exposed in the application. The generated code definition files became so sleek that for once I could actually read them (with Google protobuf implementation, there were simply and quite literally thousands and thousands of lines to go over). The rest of the code did not need much change, just a few rewiring here and there and it was done.</p>

<h3>A note about proguard</h3>

<p>In addition you need the following proguard rules:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-keep public class * extends com.squareup.wire.**{*;}
</span><span class='line'>
</span><span class='line'># Keep methods with Wire annotations (e.g. @ProtoField)
</span><span class='line'>-keepclassmembers class ** {
</span><span class='line'>    @com.squareup.wire.ProtoField public *;
</span><span class='line'>    @com.squareup.wire.ProtoEnum public *;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source is an ideology not a verb]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/11/05/open-source-is-an-ideology/"/>
    <updated>2013-11-05T10:30:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/11/05/open-source-is-an-ideology</id>
    <content type="html"><![CDATA[<h3>Extracts From a software about-me page</h3>

<blockquote><p>MyAwesomeSauce is created by @me and <strong>open-sourced</strong> on Github</p>

<p>Our library has been <strong>open-sourced</strong> and served under the GPL License v2 to facilitate ease of use among developers</p></blockquote>

<p>Seriously? Are you trying to market your creation or genuinely serving the interests of the open source community</p>

<p>From <a href="http://ben.balter.com/2012/10/15/open-source-is-not-a-verb/">Ben Balter</a>:</p>

<blockquote><p>To say “hey, we’ve got something decent here, let’s take this closed-sourced project and just hit publish” misses the mark. Your motivation can’t be to seek free labor, as in “hey, if developers want to give us their time, great, let’s put this out there and see what happens we have nothing to lose”, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that’s exactly how far they’ll stay.</p></blockquote>

<p>Open source is a philosophy, not something that you get to choose between waterfall, agile or open source (if there is such a thing). Its not about the code you write but rather, the procedure and democracy of how that code was written, reviewed and published.</p>

<p>So save yourself the trouble to say something to be open-source when you actually mean it in terms of the processes and the people involved. Don&rsquo;t get trapped in the danger zone :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hide Keyboard for multiple Edit Boxes in a page]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/11/04/hide-keyboard-for-multiple-edit-boxes-in-a-page/"/>
    <updated>2013-11-04T11:54:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/11/04/hide-keyboard-for-multiple-edit-boxes-in-a-page</id>
    <content type="html"><![CDATA[<h1>How to hide Keyboard in the case of multiple Edit Text</h1>

<p>One common problem faced by people working on Android input field forms is that many a times there is a need to show/hide the keyboard when the person touches on some other part of the screen, other than the edit box itself. However, since the focus is retained by the edit box, even if the keyboard is hidden, its hard to actually detect when and where should you be hiding the keyboard.</p>

<h1>The Solution</h1>

<p>One way to accomplish this to use the <code>dispatchTouchEvent</code> on the parent container. This is the first event that is called whenever there is a touch encountered on the surface. Only after this the rest of the touch listeners are invoked.</p>

<p>We can first dispatch the touch and then check the <code>getCurrentFocus</code> view to see if the focus is retained by the <code>EditText</code>. If it is, then we simply hide the soft keyboard from the screen.</p>

<p>Another thing to make sure is that the parent container view groups are labelled as <code>focusableInTouchMode</code>, <code>clickable</code> and <code>focusable</code></p>

<p>Here is the gist that does this job from a custom view group that contains multiple <code>EditText</code> instances.</p>

<div><script src='https://gist.github.com/creativepsyco/7229277.js'></script>
<noscript><pre><code>// Very useful to capture the focus if there is a need to
    // Currently this hides the keyboard from the view
    // If the underlying view is not an EditText
    // For this to work all the parent layouts
    // must declare themselves as focusableinTouchMode
    // Focusable and clickable
    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        View v = getActivity().getCurrentFocus();
        boolean ret = super.dispatchTouchEvent(ev);

        View w = getActivity().getCurrentFocus();
        if (!(w instanceof EditText)) {
            // Edit Text losing focus
            // Hide the keyboard here or anything else that you wanna do.

        }
        return ret;
    }
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install ia32-libs in Saucy Salamander Ubuntu 13.10]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/10/20/install-ia32-libs-in-saucy-salamander-ubuntu-13-dot-10/"/>
    <updated>2013-10-20T23:55:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/10/20/install-ia32-libs-in-saucy-salamander-ubuntu-13-dot-10</id>
    <content type="html"><![CDATA[<p>With the official release of Saucy Salamander 13.10 now available, I found myself installing it cleanly on my machine.</p>

<p>However, when I went ahead to install the <code>ia32-libs</code> package for the Android 32-bit shared libraries supplied with the SDK. I had a shock. I could not install and the terminal returned this error message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>output<span class="nv">$ </span>sudo apt-get install ia32-libs
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree
</span><span class='line'>Reading state information... Done
</span><span class='line'>Package ia32-libs is not available, but is referred to by another package.
</span><span class='line'>This may mean that the package is missing, has been obsoleted, or
</span><span class='line'>is only available from another <span class="nb">source</span>
</span><span class='line'>However the following packages replace it:
</span><span class='line'>  lib32z1 lib32ncurses5 lib32bz2-1.0
</span><span class='line'>
</span><span class='line'>E: Package <span class="s1">&#39;ia32-libs&#39;</span> has no installation candidate
</span></code></pre></td></tr></table></div></figure>


<p>Fortunately there is a solution.</p>

<p>According to this <a href="http://askubuntu.com/questions/107230/what-happened-to-the-ia32-libs-package">thread</a> all you gotta do is use the <code>i386</code> code behind the package name</p>

<p>So you can install the package as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install ia32-libs:i386
</span></code></pre></td></tr></table></div></figure>


<h4>Update</h4>

<p>According to Rick below, the above method may not work. In that case, perhaps check out this <a href="http://wiki.phoenixviewer.com/ia32-libs-in-ubuntu-13-10">Link</a>. This should definitely resolve the issue, although it might end up screwing up your package management. But you gotta try what you gotta try, right?</p>

<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Programming Tip#1: Making a Custom Centre Aligned Radio Button with a State List Drawable]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/10/02/making-a-custom-centre-aligned-radio-button-with-a-state-list-drawable/"/>
    <updated>2013-10-02T19:10:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/10/02/making-a-custom-centre-aligned-radio-button-with-a-state-list-drawable</id>
    <content type="html"><![CDATA[<h3>Custom Widgets</h3>

<p>These days I have been working extensively on apps for the Android Platform. And one thing keeps coming back to me: Resuse of components and widgets. Although most of the time when you are doing simple apps, you don&rsquo;t really pay much attention to the type of design and navigation strategies (<code>SINGLE_TOP</code> activities vs <code>SINGLE_TASK</code> blah.. blah) but when you are faced with putting different kinds of components in a single view then you probably have shuddered to think whether you were better off accomplishing this as a separate widget of its own. As can be seen from Romain Guy&rsquo;s <a href="http://www.youtube.com/watch?v=NYtB6mlu7vA">Google IO Talk</a>, developing custom views has its own significant advantages.</p>

<p>Some of the advantages are as follows:</p>

<ul>
<li>A piece of highly reusable component will be at your disposal</li>
<li>you will have fine-grained control over the lifecycle of the control/widget that you are developing, (For example, you can decide whether to load images from the network or display a dummy error image in a custom <code>ImageView</code> see <code>volley</code> <a href="https://android.googlesource.com/platform/frameworks/volley/+/d62a616ebca5bfa4f9ec5517208e13f2d501b69a/src/com/android/volley/toolbox/NetworkImageView.java"><code>NetworkImageView</code></a> for details)</li>
<li>Custom views prevent cluttering of code in a single view thereby making abstraction more powerful</li>
<li>Other general advantages due to code reuse</li>
</ul>


<p>So let&rsquo;s dive into how I managed to make a custom widget for one of the apps.</p>

<!--more-->


<h2>The Problem</h2>

<p>Develop a custom control that behaves like a radio button but has a custom icon instead of the ordinary radio button icon and also has two drawable states to show when in highlighted mode as well as normal mode</p>

<h2>The Solution</h2>

<p>Once you know how to create custom widgets its very easy.</p>

<p>First start by creating the attibutes your control will have in <code>attrs.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;HighlightedImageRadioButton&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;focusedDrawable&quot;</span> <span class="na">format=</span><span class="s">&quot;reference&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;normalDrawable&quot;</span> <span class="na">format=</span><span class="s">&quot;reference&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;/declare-styleable&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have 2 drawables that will function as our highlighted and normal state drawables respectively</p>

<p>Then, create your custom radio button by extending from <code>RadioButton</code></p>

<div><script src='https://gist.github.com/creativepsyco/6821592.js'></script>
<noscript><pre><code>
public class HighlightedImageRadioButton extends RadioButton {


    private Drawable buttonDrawable;

    public HighlightedImageRadioButton(Context context) {
        super(context);
    }

    public HighlightedImageRadioButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        initHighlightedImageRadioButton(context, attrs, 0);
    }

    public HighlightedImageRadioButton(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);

        initHighlightedImageRadioButton(context, attrs, defStyle);
    }

    private void initHighlightedImageRadioButton(Context context, AttributeSet attrs, int defStyle) {
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.HighlightedImageRadioButton, defStyle, 0);
        if (a == null) return;
        Drawable normalDrawable = a.getDrawable(R.styleable.HighlightedImageRadioButton_normalDrawable);
        Drawable focusedDrawable = a.getDrawable(R.styleable.HighlightedImageRadioButton_focusedDrawable);

        StateListDrawable stateListDrawable = new StateListDrawable();
        stateListDrawable.addState(new int[]{android.R.attr.state_enabled, android.R.attr.state_focused}, focusedDrawable);
        stateListDrawable.addState(new int[]{android.R.attr.state_checked, android.R.attr.state_enabled}, focusedDrawable);
        stateListDrawable.addState(new int[]{android.R.attr.state_enabled, android.R.attr.state_pressed}, focusedDrawable);
        stateListDrawable.addState(new int[]{android.R.attr.state_enabled, android.R.attr.state_selected}, focusedDrawable);
        stateListDrawable.addState(new int[]{android.R.attr.state_enabled}, normalDrawable);

        buttonDrawable = stateListDrawable;
        setButtonDrawable(R.drawable.beetalk_common_buzz_transparent_bg);
    }

    /**
     * Fix for putting the drawable in the center
     * notice that we put the background color of the drawable to transparent
     *
     * @param canvas
     */
    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        if (buttonDrawable != null) {
            buttonDrawable.setState(getDrawableState());
            final int verticalGravity = getGravity() &amp; Gravity.VERTICAL_GRAVITY_MASK;
            final int height = buttonDrawable.getIntrinsicHeight();

            int y = 0;

            switch (verticalGravity) {
                case Gravity.BOTTOM:
                    y = getHeight() - height;
                    break;
                case Gravity.CENTER_VERTICAL:
                    y = (getHeight() - height) / 2;
                    break;
            }

            int buttonWidth = buttonDrawable.getIntrinsicWidth();
            int buttonLeft = (getWidth() - buttonWidth) / 2;
            buttonDrawable.setBounds(buttonLeft, y, buttonLeft+buttonWidth, y + height);
            buttonDrawable.draw(canvas);
        }
    }

    @Override
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();

        buttonDrawable = null;
    }
}</code></pre></noscript></div>


<p>There&rsquo;s is a trick though, you need to center align the drawable since the default <code>RadioButton</code> is left aligned and has a text on the right side. To do this you need to override the <code>onDraw</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Fix for putting the drawable in the center</span>
</span><span class='line'><span class="cm"> * notice that we put the background color of the drawable to transparent</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param canvas</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">buttonDrawable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buttonDrawable</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">getDrawableState</span><span class="o">());</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">verticalGravity</span> <span class="o">=</span> <span class="n">getGravity</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">VERTICAL_GRAVITY_MASK</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">buttonDrawable</span><span class="o">.</span><span class="na">getIntrinsicHeight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">verticalGravity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">BOTTOM</span><span class="o">:</span>
</span><span class='line'>                <span class="n">y</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">height</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">CENTER_VERTICAL</span><span class="o">:</span>
</span><span class='line'>                <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">height</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">buttonWidth</span> <span class="o">=</span> <span class="n">buttonDrawable</span><span class="o">.</span><span class="na">getIntrinsicWidth</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">buttonLeft</span> <span class="o">=</span> <span class="o">(</span><span class="n">getWidth</span><span class="o">()</span> <span class="o">-</span> <span class="n">buttonWidth</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="n">buttonDrawable</span><span class="o">.</span><span class="na">setBounds</span><span class="o">(</span><span class="n">buttonLeft</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">buttonLeft</span><span class="o">+</span><span class="n">buttonWidth</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>        <span class="n">buttonDrawable</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above fix was found via <a href="http://stackoverflow.com/questions/4407553/android-radiobutton-button-drawable-gravity">this post</a> in Stackoverflow.</p>

<p>And this is how you use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!--Use inside a RadioGroup control--&gt;</span>
</span><span class='line'><span class="nt">&lt;com.example.ui.control.HighlightedImageRadioButton</span>
</span><span class='line'>                <span class="na">android:id=</span><span class="s">&quot;@+id/sports_topic_icon&quot;</span>
</span><span class='line'>                <span class="na">custom:focusedDrawable=</span><span class="s">&quot;@drawable/sports_topic_icon_highlighted&quot;</span>
</span><span class='line'>                <span class="na">custom:normalDrawable=</span><span class="s">&quot;@drawable/sports_topic_icon&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like a simple radio button.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhoneLib bug regarding cant find proto]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/09/27/phonelib-bug-regarding-cant-find-proto/"/>
    <updated>2013-09-27T10:30:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/09/27/phonelib-bug-regarding-cant-find-proto</id>
    <content type="html"><![CDATA[<p>Do you make use of <a href="https://code.google.com/p/libphonenumber/">PhoneNumberUtils</a> in your android project?</p>

<p>If so, have you ever encountered this exception before?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">RuntimeException</span><span class="o">:</span> <span class="n">cannot</span> <span class="n">load</span><span class="o">/</span><span class="n">parse</span> <span class="nl">metadata:</span> <span class="o">/</span><span class="n">com</span><span class="o">/</span><span class="n">google</span><span class="o">/</span><span class="n">i18n</span><span class="o">/</span><span class="n">phonenumbers</span><span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">PhoneNumberMetadataProto_MY</span> <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">d</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">PhoneNumberUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">619</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If yes, chances are you are probably using [proguard][progaurd] to do the obfuscation of code. However, as <a href="https://code.google.com/p/libphonenumber/issues/detail?id=259&amp;can=1&amp;q=metadata">this</a> points out, proguard automatically also obfuscates the library files. However, the PhoneNumberUtils has a hardcoded path to the proto files. Therefore, one cannot rely on obfuscating the library&rsquo;s code.</p>

<p>To resolve you must add the following lines in your <code>proguard</code> configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">i18n</span><span class="o">.</span><span class="na">phonenumbers</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This problem occurs in Android version Honeycomb and below it, as versions after Honeycomb have their own phonenumber util included which has a namespace of <code>com.google.android.i18n.phonenumbers</code>. If you are supporting version below honeycomb this can be an overlooked disaster.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding a perfect dev environment]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/07/04/finding-a-perfect-dev-environment/"/>
    <updated>2013-07-04T13:51:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/07/04/finding-a-perfect-dev-environment</id>
    <content type="html"><![CDATA[<p>Setting up a unobstrusive development environment has its advantages. If you are one of those people who probably spend about 14 hours a day sitting in front of a monitor doing what-not, from testing to deployment and development, then read on. Otherwise you can spend some time reading an <a href="http://www.ibm.com/developerworks/rational/library/define-scope-development-environment/">IBM</a> justification of how and why a solid dev environment pays off. This post is about setting up a solid development environment on Ubuntu Linux 12.04 and contains bits and pieces of information of how a lot of things can be automated.</p>

<p>I assume some familiarity with Linux command-line for the below.</p>

<h3>Prepare your home directory</h3>

<p>This would be where all your patches come in handy. Spice it with some names that you can remember in the long-run. Keep a separate directory for SDKs, sources and the common shared libraries that you use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /home/creativepsyco
</span><span class='line'><span class="nb">cd</span> /home
</span><span class='line'>chown msk creativepsyco
</span><span class='line'>chgrp msk creativepsyco
</span><span class='line'><span class="nb">cd</span> /home/creativepsyco
</span><span class='line'>mkdir android
</span></code></pre></td></tr></table></div></figure>


<h3>Install ZSH and Oh-My-ZSH</h3>

<p><a href="http://www.zsh.org/">ZSH</a> is a fanstastic tool and better than your average joe-bash-shell. It has advanced modules for autocompletion and lots of plugins which, after you use, trust me, are going to be your goto tools for specific tasks.</p>

<p>You can install zsh by using these commands</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install zsh
</span></code></pre></td></tr></table></div></figure>


<p>Also, install <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> which is another cake layer on top of zsh. It includes tons of automatic zsh scripts and plugins to aid you in development.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</span></code></pre></td></tr></table></div></figure>


<p>Set ZSH as your default shell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chsh -s /bin/zsh
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>A tip: To get more out of your oh-my-zsh installation you need to enable some or a lot of the plugins in your <code>~/.zshrc</code> file which replaces your <code>~/.bashrc</code> file</p></blockquote>

<h3>Install Git</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install git-core
</span></code></pre></td></tr></table></div></figure>


<h3>Make yourself feel at home with solarized</h3>

<p>I absolutely love the <a href="http://ethanschoonover.com/solarized">Solarized dark theme</a>. I use it everywhere: At work, in my MacBook Pro (running from 2010 without a scratch so far [touch wood]). Here&rsquo;s how it looks like:</p>

<p><img src="http://d.pr/i/xmRI.jpg" alt="Solarized Dark Image" /></p>

<p>Isn&rsquo;t it absolutely delicious. Unfortunately some of the ways to install on ubuntu terminal or gnome-terminal have been rather futile. Here&rsquo;s one that works so far:</p>

<ol>
<li>Go to your home directory</li>
<li>Blindly follow the commands below</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/sigurdga/gnome-terminal-colors-solarized.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gnome-terminal-colors-solarized
</span><span class='line'><span class="nv">$ </span>./solarize
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>And Voila experiment between the two themes</li>
</ol>


<h3>Start installing Android Libraries</h3>

<p>Now that the eyes are set, start installing the necessary SDKs from Android. You can get the SDK from Android&rsquo;s site. Just need to unzip it and place it in the home folder. Eventually your folder configuration should look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msk@ubuntu:/home/creativepsyco/android<span class="nv">$ </span>ls
</span><span class='line'>adt-bundle-linux            ----- ADT bundle
</span><span class='line'>idea-IC                     ----- IDE IntelliJ stack <span class="o">(</span>Or Eclipse<span class="o">)</span>
</span><span class='line'>shared_android_lib          ----- Shared library
</span><span class='line'>project_android             ----- Project Git directory
</span><span class='line'>anotherapp_android          ----- Project Git directory
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>A Tip: If you are using a 64-bit OS then to make your life easy, you should install these compatible libs to help you: <code>sudo apt-get install ia32-libs</code></p></blockquote>

<h3>SQLite</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install sqlite3
</span></code></pre></td></tr></table></div></figure>


<h3>Ending Note</h3>

<p>Now you have everything for Android development and please follow <a href="http://developer.android.com/training/index.html">Google&rsquo;s tutorials</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Shortcuts and Must-have Gists]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/06/24/android-shortcuts-and-must-have-gists/"/>
    <updated>2013-06-24T17:27:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/06/24/android-shortcuts-and-must-have-gists</id>
    <content type="html"><![CDATA[<h3>Making use of shared preferences for storing information</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getStoredLoginState</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">prefs</span> <span class="o">=</span> <span class="n">getSharedPreferences</span><span class="o">(</span><span class="n">PREF_NAME</span><span class="o">,</span> <span class="n">MODE_PRIVATE</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">state</span> <span class="o">=</span> <span class="n">prefs</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="n">B_LOGGED_IN_STATE</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLoggedInState</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isLoggedIn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">prefs</span> <span class="o">=</span> <span class="n">getSharedPreferences</span><span class="o">(</span><span class="n">PREF_NAME</span><span class="o">,</span> <span class="n">MODE_PRIVATE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">prefs</span><span class="o">.</span><span class="na">edit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">editor</span><span class="o">.</span><span class="na">putBoolean</span><span class="o">(</span><span class="n">B_LOGGED_IN_STATE</span><span class="o">,</span> <span class="n">isLoggedIn</span><span class="o">);</span>
</span><span class='line'>        <span class="n">editor</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Making use of the redirection trick</h3>

<p>Let&rsquo;s say you want to make sure the user is logged in before giving him access to a particular activity view. What you can do is to check the status of the login token through a shared preference and send back an intent with the intent that the current view was invoked with via an extra Intent parameter</p>

<p>This is the code for the invoker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">detail_view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getStoredLoginState</span><span class="o">()</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getIntent</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;DetailView onCreate recd position of item: &quot;</span> <span class="o">+</span> <span class="n">intent</span><span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">ITEM_ID</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">ITEM_ID</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Set the text</span>
</span><span class='line'>            <span class="n">TextView</span> <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">pos</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// not logged in</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getIntent</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Intent</span> <span class="n">newIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">LoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">newIntent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">REDIRECT_INTENT</span><span class="o">,</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'><span class="c1">//            newIntent.setAction(Intent.ACTION_MAIN);</span>
</span><span class='line'>            <span class="n">newIntent</span><span class="o">.</span><span class="na">setFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_NO_HISTORY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">startActivity</span><span class="o">(</span><span class="n">newIntent</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is the login view code. Note that in the invoker&rsquo;s code we use the <code>Intent.FLAG_ACTIVITY_NO_HISTORY</code> to make sure that the call does not stay in the stack since login is something we need to ensure out of navigation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;LoginActivity onCreate() hit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Login State: &quot;</span> <span class="o">+</span> <span class="n">getStoredLoginState</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Check for a redirect</span>
</span><span class='line'>        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
</span><span class='line'>        <span class="n">redirect_intent</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">REDIRECT_INTENT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">redirect_intent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;LoginActivity : this is a redirect intent &quot;</span> <span class="o">+</span> <span class="n">redirect_intent</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBtnSubmitClicked</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">username</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">editText</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">password</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">editText1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isValidLogin</span><span class="o">(</span><span class="n">username</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">password</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">isLoggedIn</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;LoginActivity onBtnSubmitClicked() Username Password match&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">isLoggedIn</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">AlertDialog</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;Wrong username/password&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="s">&quot;You have entered wrong username/password&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">setPositiveButton</span><span class="o">(</span><span class="s">&quot;Ok&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">DialogInterface</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">DialogInterface</span> <span class="n">dialog</span><span class="o">,</span> <span class="kt">int</span> <span class="n">which</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// continue with delete</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">})</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setLoggedInState</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isLoggedIn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;LoginActivity onBtnSubmitClicked starting List View Activity&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">redirect_intent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// this will make the activity pop up back from the Task stack</span>
</span><span class='line'>                <span class="n">redirect_intent</span><span class="o">.</span><span class="na">addFlags</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">FLAG_ACTIVITY_CLEAR_TOP</span><span class="o">);</span>
</span><span class='line'>                <span class="n">startActivity</span><span class="o">(</span><span class="n">redirect_intent</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">ListActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More information available at the <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">Android Documentation</a></p>

<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Final Year Project - A web app hosting for apps]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/05/21/my-final-year-project-a-web-app-hosting-for-apps/"/>
    <updated>2013-05-21T21:53:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/05/21/my-final-year-project-a-web-app-hosting-for-apps</id>
    <content type="html"><![CDATA[<p>For my final year project in the School of Computing NUS I had to do something very exciting related to working with web apps. If you are familiar with online continuous integration environments like <a href="http://travis-ci.org">Travis</a> and <a href="http://jenkins-ci.org">Jenkins</a> then cracking this issue is a hen&rsquo;s egg. The thing that I was required to do was compile and run research programs within a webapp. That is, feed input to a program written in C, C++ etc. and get the output, display it to the user. All of this included a data repository which housed patient data.</p>

<!--more-->


<h3>Abstract</h3>

<p>Ever pervasive use of computational algorithms has changed the face of medical data analysis. Certain surgeries such as craniomaxillofacial (CMF) surgery require sophisticated planning. Hence computer-aided surgery planning through research algorithms becomes crucial to its success. Most analysis algorithms require themselves to be installed in a computer before they can be used. Some of the analysis algorithms also require technically intensive setups on local workstations, which medical clinicians don’t have much experience with. This significantly prevents mass distribution and adoption of new algorithms in the medical research industry.</p>

<p>To advance the state-of-the-art in computer-aided surgery planning and medical data analysis, we need to collect and analyze a large amount of patient data. The goal of this project is to develop a repository and processing center for the remote management and processing of patients’ medical data. The system will be a server-based system so that it can be extended to a multi-server system. It will have to manage text data, medical images and 3D models, but also the remote installation and batch execution of software algorithms to process the data, and reporting of processing results to the users. It should also support the access, retrieval and display of the data by authorized users. This ultimately will allow users to execute sophisticated algorithms on patient data without requiring them to go through extensive technical setups</p>

<p><a href="http://blog.mohitkanwal.com/docs/Final_Report.pdf">Download The Paper</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making sense of vacations - Geek Style]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/05/21/making-sense-of-vacations-geek-style/"/>
    <updated>2013-05-21T21:44:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/05/21/making-sense-of-vacations-geek-style</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong></p>

<p>Summer time and any geek knows that sitting at home means doing something to increase your productivity levels is a good thing. So here is something that I plan/have done.</p>

<!--more-->


<ul>
<li>Learn a new language &ndash; Whether it&rsquo;s a programming or simply Arabic, Japanese or Mandarin one must keep up the brain lobes working</li>
<li>Travel on a road trip &ndash; Some people call road trips boring but I think it gives you the freedom to try out different stuff, stop on the road, do something, hop back on</li>
<li>Go to a museum &ndash; How many times do you actually goto historically significant places? Vacations give you time that you must use</li>
<li>Join a Gym &ndash; No matter what body shape you are in, keeping yourself fit and sharp does not come easy. Vacations are the apt time to build this habit. Do regular workouts and warmups if you are not planning to join a gym.</li>
<li>Cook some dishes &ndash; Vacations are the best time to get into the kitchen and start experimenting, something we never really find a time to do</li>
</ul>


<p>Well so far I am good on the first 3, need to gradually pickup the rest. And my vacation is running out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Development within a Virtual Machine]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/04/23/android-development-within-a-virtual-machine/"/>
    <updated>2013-04-23T17:30:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/04/23/android-development-within-a-virtual-machine</id>
    <content type="html"><![CDATA[<p>Sometimes it can be <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1027964">really fustrating</a> to work within a Virtual Machine (VM) which might not have support for a number of removable devices. I am talking of VMWare workstation which is a big part of the problem.</p>

<p>Below I describe a working way to install a reliable working environment in VMWare Workstation 9.x running Ubuntu 12.10</p>

<!--more-->


<p>For the instructions below I am installing everything under: <code>~/android</code></p>

<h3>Pre-Requisite</h3>

<ul>
<li>Install Sun (Oracle) JDK for IntelliJ Idea</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:webupd8team/java
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install oracle-java7-installer
</span></code></pre></td></tr></table></div></figure>


<h3>Install Intelli-J</h3>

<ul>
<li>Donwload Intell-J from <a href="http://www.jetbrains.com/idea/download/index.html">this</a> and extract to a directory in your computer</li>
<li>Unpack the directory</li>
<li>Add the Idea bin folder to your PATH</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/lib/&lt;YOUR_IDEA_FOLDER&gt;/bin
</span></code></pre></td></tr></table></div></figure>


<h3>Install Android SDK Bundle</h3>

<ul>
<li>Download the ADT Bundle from <a href="http://developer.android.com/sdk/index.html">this</a></li>
<li>Extract it and move to a location in your</li>
<li>Add these lines to your <code>.bashrc</code> file</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:~/android/android-sdk-linux/tools
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:~/android/android-sdk-linux/platform-tools
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:~/android/idea-IC/bin
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Source your <code>.bashrc</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<h3>Test a Device</h3>

<p>Now go ahead and test your shiny new Android Development device by connecting it to the USB port on your machine.</p>

<ul>
<li><p>In VMWare you need to make sure that it connects to the Android Device. You can do this, by navigating to <strong>VM > Removable Devices > Samsung Android Device > Connect (Disconnect fro host)</strong>. This will disconnect it from your host machine (Windows 7 in my case) and connect it to the VMWare instance.</p></li>
<li><p>In VMWare Ubuntu:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb devices <span class="c">#lists all the devices attached to the computer</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If the above command displays nothing, do this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb <span class="nb">wait</span>-for-device
</span><span class='line'>adb start-server
</span><span class='line'>adb devices <span class="c"># display connected devices</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will make it wait for the device to link up</p>

<h3>Android Device Issues with VMWare</h3>

<p>Some of the issues that I encountered while connecting my Samsung Galaxy S-III to VMWare on a Windows 7 Enterprise workstation are as follows:</p>

<ul>
<li><p>If you have an error message that says that the device cannot be plugged out, then make sure no process is accessing the device. This includes the Kies software from Samsung. Use the Task Manager to kill them</p></li>
<li><p>If you have an error message that says there is a driver error then perhaps you have a USB 3.0 issue. As of now, VMWare does not support Intel-based USB 3.0 controllers. So you need to suck it up for the moment and find a USB 2.0 port on your machine. Otherwise you need to look up another <a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1027964">manual</a></p></li>
</ul>


<h3>Conclusion</h3>

<p>Hopefully by the end of this guide, there is a working android development setup on your machine.</p>
]]></content>
  </entry>
  
</feed>
