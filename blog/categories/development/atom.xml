<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | creativepsyco's Blog]]></title>
  <link href="http://blog.mohitkanwal.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://blog.mohitkanwal.com/"/>
  <updated>2015-12-23T15:05:33+08:00</updated>
  <id>http://blog.mohitkanwal.com/</id>
  <author>
    <name><![CDATA[Mohit Kanwal]]></name>
    <email><![CDATA[mohit.kanwal+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Doing a proper Github pull request]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2014/01/24/doing-a-proper-github-pull-request/"/>
    <updated>2014-01-24T16:16:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2014/01/24/doing-a-proper-github-pull-request</id>
    <content type="html"><![CDATA[<p>While there may be different kind of development strategies floating around the merge vs rebase git model, one thing is for sure, you would at the end of the day want a clean merge from the contributors so that it can be tracked tested and cherry-picked if it needs to. This is where pull-requests are so effective.</p>

<h2>What is a pull-request?</h2>

<p>From the <a href="https://help.github.com/articles/using-pull-requests">Official Github Guide</a>:</p>

<blockquote><p>Pull requests let you tell others about changes you&rsquo;ve pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.</p></blockquote>

<p>Pull requests are useful in the shared repository model where contributors can work on different topic branches and then file a pull request to be able to initiate discussion about potential changes which does not need to affect the rest of the project.</p>

<h2>Example</h2>

<p>Here is an <a href="https://github.com/square/wire/pull/81">example</a> of a pull request I filed for Square&rsquo;s Wire open source project.</p>

<!--more-->


<h2>Creating a pull request</h2>

<p>These steps create a topic branch off the <code>master</code> branch.</p>

<p><code>bash
git pull origin master
git checkout -b pull-request-demo
git push origin pull-request-demo
</code>
After that you can work on the branch and do indvidual commits. At this point if you need to update your local copy of the source you should not in any case do a</p>

<p><code>bash
git pull origin master
</code></p>

<p>This will screw up your commits by merging the two branches and will cause issues when your topic branch will is merged with <code>master</code>. Instead do a <code>rebase</code>. In short this will preserve the order of your commits and keeps the git history linear. To understand why please refer to <a href="https://blogs.atlassian.com/2013/10/git-team-workflows-merge-or-rebase/">this</a></p>

<p><code>bash
git rebase origin master
</code></p>

<blockquote><p>Never rebase already pushed branches. Rebase should only be applied to your local working branch about no one needs to know. This way we can always force push our changes to Github so that the pull request is bettter as we will see in the next step.</p></blockquote>

<h2>Filing up a pull request</h2>

<p>You will need to use the browser to visit the repository web page and file one. More details <a href="http://yangsu.github.io/pull-request-tutorial/">here</a></p>

<p><img src="http://github-images.s3.amazonaws.com/help/pull_requests/pull-request-review-page.png" height="400" width="800" alt="Pull Request Page" /></p>

<h2>Modifying Code after discussions</h2>

<p>Once the pull request has been filed you can start discussing with the maintainer of the project about the potential changes that need to be made. For example, style fixes etc.</p>

<p>You can push more commits to the the topic branch and the pull request will get updated. Once the pull request is sort of approved by the maintainer, he/she will probably ask you submit only one single commit for your changes. This is very important as merging any contributed can be tracked.</p>

<p>You would need to squash your commits for this. You can do this by:</p>

<p><code>bash
git rebase -i HEAD~5
</code>
This will allow you to pick the commits that you want to keep or squash them altogether. The disadvantage of squashing commits is that you lose your git history. However, if you want you can have a dirty branch to move the commits to in case you want the history to remain.</p>

<p>And force push your changes</p>

<p><code>bash
git push origin pull-request-demo --force
</code></p>

<p>Your changes will appear on the filed pull request page. And if all goes will be merged with the main project branch :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding a perfect dev environment]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/07/04/finding-a-perfect-dev-environment/"/>
    <updated>2013-07-04T13:51:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/07/04/finding-a-perfect-dev-environment</id>
    <content type="html"><![CDATA[<p>Setting up a unobstrusive development environment has its advantages. If you are one of those people who probably spend about 14 hours a day sitting in front of a monitor doing what-not, from testing to deployment and development, then read on. Otherwise you can spend some time reading an <a href="http://www.ibm.com/developerworks/rational/library/define-scope-development-environment/">IBM</a> justification of how and why a solid dev environment pays off. This post is about setting up a solid development environment on Ubuntu Linux 12.04 and contains bits and pieces of information of how a lot of things can be automated.</p>

<p>I assume some familiarity with Linux command-line for the below.</p>

<h3>Prepare your home directory</h3>

<p>This would be where all your patches come in handy. Spice it with some names that you can remember in the long-run. Keep a separate directory for SDKs, sources and the common shared libraries that you use.</p>

<p><code>bash
mkdir /home/creativepsyco
cd /home
chown msk creativepsyco
chgrp msk creativepsyco
cd /home/creativepsyco
mkdir android
</code></p>

<h3>Install ZSH and Oh-My-ZSH</h3>

<p><a href="http://www.zsh.org/">ZSH</a> is a fanstastic tool and better than your average joe-bash-shell. It has advanced modules for autocompletion and lots of plugins which, after you use, trust me, are going to be your goto tools for specific tasks.</p>

<p>You can install zsh by using these commands</p>

<p><code>bash
sudo apt-get update &amp;&amp; sudo apt-get install zsh
</code></p>

<p>Also, install <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> which is another cake layer on top of zsh. It includes tons of automatic zsh scripts and plugins to aid you in development.</p>

<p><code>bash
curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></p>

<p>Set ZSH as your default shell</p>

<p><code>bash
chsh -s /bin/zsh
</code></p>

<blockquote><p>A tip: To get more out of your oh-my-zsh installation you need to enable some or a lot of the plugins in your <code>~/.zshrc</code> file which replaces your <code>~/.bashrc</code> file</p></blockquote>

<h3>Install Git</h3>

<p><code>bash
sudo apt-get install git-core
</code></p>

<h3>Make yourself feel at home with solarized</h3>

<p>I absolutely love the <a href="http://ethanschoonover.com/solarized">Solarized dark theme</a>. I use it everywhere: At work, in my MacBook Pro (running from 2010 without a scratch so far [touch wood]). Here&rsquo;s how it looks like:</p>

<p><img src="http://d.pr/i/xmRI.jpg" alt="Solarized Dark Image" /></p>

<p>Isn&rsquo;t it absolutely delicious. Unfortunately some of the ways to install on ubuntu terminal or gnome-terminal have been rather futile. Here&rsquo;s one that works so far:</p>

<ol>
<li>Go to your home directory</li>
<li>Blindly follow the commands below
<code>bash
$ git clone git://github.com/sigurdga/gnome-terminal-colors-solarized.git
$ cd gnome-terminal-colors-solarized
$ ./solarize
</code></li>
<li>And Voila experiment between the two themes</li>
</ol>


<h3>Start installing Android Libraries</h3>

<p>Now that the eyes are set, start installing the necessary SDKs from Android. You can get the SDK from Android&rsquo;s site. Just need to unzip it and place it in the home folder. Eventually your folder configuration should look something like this:
<code>bash
msk@ubuntu:/home/creativepsyco/android$ ls
adt-bundle-linux            ----- ADT bundle
idea-IC                     ----- IDE IntelliJ stack (Or Eclipse)
shared_android_lib          ----- Shared library
project_android             ----- Project Git directory
anotherapp_android          ----- Project Git directory
</code></p>

<blockquote><p>A Tip: If you are using a 64-bit OS then to make your life easy, you should install these compatible libs to help you: <code>sudo apt-get install ia32-libs</code></p></blockquote>

<h3>SQLite</h3>

<p><code>bash
sudo apt-get install sqlite3
</code></p>

<h3>Ending Note</h3>

<p>Now you have everything for Android development and please follow <a href="http://developer.android.com/training/index.html">Google&rsquo;s tutorials</a>.</p>
]]></content>
  </entry>
  
</feed>
