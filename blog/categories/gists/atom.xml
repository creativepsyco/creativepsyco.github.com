<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gists | creativepsyco's Blog]]></title>
  <link href="http://blog.mohitkanwal.com/blog/categories/gists/atom.xml" rel="self"/>
  <link href="http://blog.mohitkanwal.com/"/>
  <updated>2015-12-23T12:10:38+08:00</updated>
  <id>http://blog.mohitkanwal.com/</id>
  <author>
    <name><![CDATA[Mohit Kanwal]]></name>
    <email><![CDATA[mohit.kanwal+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Shortcuts and Must-have Gists]]></title>
    <link href="http://blog.mohitkanwal.com/blog/2013/06/24/android-shortcuts-and-must-have-gists/"/>
    <updated>2013-06-24T17:27:00+08:00</updated>
    <id>http://blog.mohitkanwal.com/blog/2013/06/24/android-shortcuts-and-must-have-gists</id>
    <content type="html"><![CDATA[<h3>Making use of shared preferences for storing information</h3>

<p>```java</p>

<pre><code>public boolean getStoredLoginState() {
    prefs = getSharedPreferences(PREF_NAME, MODE_PRIVATE);
    boolean state = prefs.getBoolean(B_LOGGED_IN_STATE, false);
    return state;
}

public void setLoggedInState(boolean isLoggedIn) {
    prefs = getSharedPreferences(PREF_NAME, MODE_PRIVATE);
    SharedPreferences.Editor editor = prefs.edit();

    editor.putBoolean(B_LOGGED_IN_STATE, isLoggedIn);
    editor.commit();
}
</code></pre>

<p>```</p>

<h3>Making use of the redirection trick</h3>

<p>Let&rsquo;s say you want to make sure the user is logged in before giving him access to a particular activity view. What you can do is to check the status of the login token through a shared preference and send back an intent with the intent that the current view was invoked with via an extra Intent parameter</p>

<p>This is the code for the invoker:</p>

<p>```java
  public void onCreate(Bundle savedInstanceState) {</p>

<pre><code>    super.onCreate(savedInstanceState);
    setContentView(R.layout.detail_view);

    if (getStoredLoginState() == true) {
        Intent intent = this.getIntent();
        Log.i(TAG, "DetailView onCreate recd position of item: " + intent.getIntExtra(ITEM_ID, 10));

        int pos = intent.getIntExtra(ITEM_ID, 10);

        // Set the text
        TextView textView = (TextView) findViewById(R.id.textView1);

        textView.setText(" " + pos);
    } else {
        // not logged in

        Intent intent = this.getIntent();
        Intent newIntent = new Intent(this, LoginActivity.class);
        newIntent.putExtra(REDIRECT_INTENT, intent);
</code></pre>

<p>//            newIntent.setAction(Intent.ACTION_MAIN);</p>

<pre><code>        newIntent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);

        startActivity(newIntent);
    }
}
</code></pre>

<p>```</p>

<p>And this is the login view code. Note that in the invoker&rsquo;s code we use the <code>Intent.FLAG_ACTIVITY_NO_HISTORY</code> to make sure that the call does not stay in the stack since login is something we need to ensure out of navigation:</p>

<p>```java
@Override</p>

<pre><code>public void onCreate(Bundle savedInstanceState) {
    Log.i(TAG, "LoginActivity onCreate() hit");
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    Log.i(TAG, "Login State: " + getStoredLoginState());

    // Check for a redirect
    Intent intent = getIntent();
    redirect_intent = intent.getParcelableExtra(REDIRECT_INTENT);

    if (redirect_intent != null) {
        Log.i(TAG, "LoginActivity : this is a redirect intent " + redirect_intent);
    }
}

public void onBtnSubmitClicked(View view) {
    TextView username = (TextView) findViewById(R.id.editText);
    TextView password = (TextView) findViewById(R.id.editText1);

    if (isValidLogin(username.getText().toString(), password.getText().toString())) {
        isLoggedIn = true;
        Log.i(TAG, "LoginActivity onBtnSubmitClicked() Username Password match");
    } else {
        isLoggedIn = false;
        new AlertDialog.Builder(this)
                .setTitle("Wrong username/password")
                .setMessage("You have entered wrong username/password")
                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        // continue with delete
                    }
                })
                .show();
    }

    setLoggedInState();

    if (isLoggedIn) {
        Log.i(TAG, "LoginActivity onBtnSubmitClicked starting List View Activity");
        if (redirect_intent != null) {
            // this will make the activity pop up back from the Task stack
            redirect_intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(redirect_intent);
        } else {
            Intent intent = new Intent(this, ListActivity.class);
            startActivity(intent);
        }
    }
}
</code></pre>

<p>```</p>

<p>More information available at the <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">Android Documentation</a></p>

<p>Cheers</p>
]]></content>
  </entry>
  
</feed>
